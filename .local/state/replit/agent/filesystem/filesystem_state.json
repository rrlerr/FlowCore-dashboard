{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"nixpacks.toml":{"content":"[phases.setup]\nnixPkgs = [\"nodejs_20\", \"esbuild\"]\n\n[phases.install]\ncmds = [\"npm install\"]\n\n[phases.build]\ncmds = [\"npm run build\"]\n\n[phases.start]\ncmd = \"npm run start\"\n","size_bytes":170},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# FlowCore - All-in-One Business Management Platform\n\n## Overview\n\nFlowCore is a comprehensive business management SaaS platform that combines CRM, sales tracking, project management, ticketing, and communication tools into a single, integrated solution. The application is built with a modern full-stack architecture using React for the frontend and Node.js/Express for the backend, with PostgreSQL as the database.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript\n- **Styling**: Tailwind CSS with shadcn/ui components\n- **State Management**: TanStack Query for server state, React hooks for local state\n- **Routing**: Wouter for client-side routing\n- **Build Tool**: Vite for development and production builds\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js\n- **Language**: TypeScript with ES modules\n- **Database**: PostgreSQL with Drizzle ORM\n- **Database Provider**: Neon Database (serverless PostgreSQL)\n- **API**: RESTful endpoints with proper error handling\n\n### Database Schema\nThe application uses a PostgreSQL database with the following main entities:\n- **Users**: Authentication and user management\n- **Leads**: Customer relationship management\n- **Tickets**: Support ticket system\n- **Deals**: Sales pipeline management\n- **Projects**: Project tracking with tasks\n- **Tasks**: Individual task management\n- **Emails**: Communication history\n\n## Key Components\n\n### Core Business Modules\n1. **CRM Module**: Lead management with status tracking, priority levels, and tagging\n2. **Sales Module**: Deal pipeline, revenue tracking, and sales analytics\n3. **Tickets Module**: Support ticket system with priority and assignment features\n4. **Projects Module**: Project management with task tracking and progress visualization\n5. **Email Module**: Communication tracking and history\n\n### AI Assistant\n- Integrated chatbot with natural language processing\n- Supports navigation commands and entity creation\n- Uses OpenAI API for intelligent responses\n- Context-aware assistance for business operations\n\n### User Interface\n- **Layout**: Sidebar navigation with module switching\n- **Components**: Reusable UI components from shadcn/ui\n- **Responsiveness**: Mobile-first design with responsive breakpoints\n- **Theme**: Light/dark mode support with CSS variables\n\n## Data Flow\n\n1. **Client Requests**: Frontend makes API calls using TanStack Query\n2. **API Routes**: Express routes handle CRUD operations\n3. **Database Operations**: Drizzle ORM manages PostgreSQL interactions\n4. **Data Validation**: Zod schemas ensure type safety\n5. **Response Handling**: Structured JSON responses with error handling\n\n### State Management Flow\n- Server state managed by TanStack Query with caching\n- Local component state handled by React hooks\n- Form state managed by React Hook Form with Zod validation\n- Real-time updates through query invalidation\n\n## External Dependencies\n\n### Database\n- **Neon Database**: Serverless PostgreSQL provider\n- **Drizzle ORM**: Type-safe database operations\n- **Connection**: Pool-based connections for scalability\n\n### AI Integration\n- **OpenAI API**: Natural language processing for AI assistant\n- **Context Processing**: Intent recognition and response generation\n\n### UI Framework\n- **shadcn/ui**: Pre-built accessible components\n- **Radix UI**: Primitive components for complex interactions\n- **Tailwind CSS**: Utility-first styling\n\n### Development Tools\n- **Vite**: Fast development server and build tool\n- **TypeScript**: Type safety across the application\n- **ESLint/Prettier**: Code quality and formatting\n\n## Deployment Strategy\n\n### Build Process\n1. **Frontend**: Vite builds optimized React bundle\n2. **Backend**: ESBuild compiles TypeScript to JavaScript\n3. **Assets**: Static files served from dist/public directory\n\n### Environment Configuration\n- **Development**: Local development with hot reloading\n- **Production**: Optimized builds with environment variables\n- **Database**: Automatic migrations with Drizzle Kit\n\n### Server Setup\n- **Express Server**: Serves both API and static files\n- **Middleware**: Request logging, error handling, and CORS\n- **Session Management**: Cookie-based sessions with PostgreSQL storage\n\nThe application follows a monolithic architecture with clear separation between frontend and backend concerns, making it maintainable and scalable for business management needs.","size_bytes":4477},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n;\n\nexport default defineConfig({\n  plugins: [\n    react()\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n      \"@assets\": path.resolve(__dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":719},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport path from \"path\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const pathStr = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (pathStr.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${pathStr} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n\n    // React SPA fallback — must be last!\n    app.get(\"*\", (req: Request, res: Response) => {\n      res.sendFile(path.resolve(__dirname, \"../client/dist/index.html\"));\n    });\n  }\n\n  const port = 5000;\n  server.listen(\n    {\n      port,\n      host: \"0.0.0.0\",\n      reusePort: true,\n    },\n    () => {\n      log(`serving on port ${port}`);\n    }\n  );\n})();\n","size_bytes":1861},"server/localAI.ts":{"content":"interface AIResponse {\n  action: \"navigate\" | \"create\" | \"respond\" | \"open_modal\";\n  module?: string;\n  type?: string;\n  data?: any;\n  message?: string;\n}\n\n// Advanced natural language processing patterns\nconst INTENT_PATTERNS = {\n  navigation: [\n    /(?:go to|navigate to|open|show me|take me to|view)\\s+(?:the\\s+)?(.+?)(?:\\s+(?:page|section|module|dashboard))?$/i,\n    /(?:switch to|change to)\\s+(.+?)(?:\\s+(?:mode|view))?$/i,\n    /i\\s+(?:want to|need to|would like to)\\s+(?:see|check|view)\\s+(.+?)$/i\n  ],\n  create: [\n    /(?:create|add|new|make)\\s+(?:a\\s+)?(.+?)(?:\\s+(?:record|entry|item))?(?:\\s+for\\s+(.+?))?$/i,\n    /i\\s+(?:want to|need to|would like to)\\s+(?:create|add|make)\\s+(?:a\\s+)?(.+?)$/i,\n    /(?:register|setup|establish)\\s+(?:a\\s+)?(.+?)$/i\n  ],\n  search: [\n    /(?:find|search|look for|locate)\\s+(.+?)$/i,\n    /(?:show me|display)\\s+(?:all\\s+)?(.+?)(?:\\s+(?:with|containing|matching)\\s+(.+?))?$/i,\n    /i\\s+(?:want to|need to)\\s+(?:find|search for)\\s+(.+?)$/i\n  ],\n  update: [\n    /(?:update|edit|modify|change)\\s+(.+?)(?:\\s+(?:to|with)\\s+(.+?))?$/i,\n    /(?:set|assign)\\s+(.+?)(?:\\s+(?:to|as)\\s+(.+?))?$/i\n  ],\n  delete: [\n    /(?:delete|remove|cancel)\\s+(.+?)$/i,\n    /(?:close|resolve)\\s+(.+?)$/i\n  ],\n  status: [\n    /(?:what|show)\\s+(?:is\\s+)?(?:the\\s+)?(?:status of|current)\\s+(.+?)$/i,\n    /(?:how many|count)\\s+(.+?)(?:\\s+(?:are there|do we have))?$/i\n  ],\n  assign: [\n    /(?:assign|give)\\s+(.+?)\\s+to\\s+(.+?)$/i,\n    /(?:set\\s+)?(.+?)\\s+(?:assignee|owner|responsible)\\s+(?:to|as)\\s+(.+?)$/i\n  ]\n};\n\nconst MODULE_MAPPINGS = {\n  // CRM Module\n  'lead': 'leads', 'leads': 'leads', 'customer': 'leads', 'customers': 'leads', 'prospect': 'leads', 'prospects': 'leads',\n  'contact': 'leads', 'contacts': 'leads', 'client': 'leads', 'clients': 'leads',\n  \n  // Tickets Module\n  'ticket': 'tickets', 'tickets': 'tickets', 'support': 'tickets', 'issue': 'tickets', 'issues': 'tickets',\n  'bug': 'tickets', 'bugs': 'tickets', 'problem': 'tickets', 'problems': 'tickets', 'help': 'tickets',\n  \n  // Deals Module\n  'deal': 'deals', 'deals': 'deals', 'sale': 'deals', 'sales': 'deals', 'opportunity': 'deals',\n  'opportunities': 'deals', 'revenue': 'deals', 'pipeline': 'deals',\n  \n  // Projects Module\n  'project': 'projects', 'projects': 'projects', 'work': 'projects', 'job': 'projects', 'jobs': 'projects',\n  \n  // Tasks Module\n  'task': 'tasks', 'tasks': 'tasks', 'todo': 'tasks', 'todos': 'tasks', 'assignment': 'tasks',\n  'assignments': 'tasks', 'action': 'tasks', 'actions': 'tasks',\n  \n  // Email Module\n  'email': 'emails', 'emails': 'emails', 'message': 'emails', 'messages': 'emails', 'mail': 'emails',\n  'communication': 'emails', 'correspondence': 'emails',\n  \n  // Users Module\n  'user': 'users', 'users': 'users', 'employee': 'users', 'employees': 'users', 'staff': 'users',\n  'team': 'users', 'member': 'users', 'members': 'users', 'person': 'users', 'people': 'users',\n  \n  // Companies Module\n  'company': 'companies', 'companies': 'companies', 'business': 'companies', 'businesses': 'companies',\n  'organization': 'companies', 'organizations': 'companies', 'firm': 'companies', 'firms': 'companies',\n  \n  // Dashboard\n  'dashboard': 'dashboard', 'home': 'dashboard', 'overview': 'dashboard', 'summary': 'dashboard',\n  'stats': 'dashboard', 'statistics': 'dashboard', 'metrics': 'dashboard', 'analytics': 'dashboard',\n  \n  // Reports\n  'report': 'reports', 'reports': 'reports', 'analytics': 'reports', 'insights': 'reports',\n  'data': 'reports', 'analysis': 'reports'\n};\n\nconst STATUS_MAPPINGS = {\n  // Lead statuses\n  'new': 'new', 'fresh': 'new', 'recent': 'new',\n  'contacted': 'contacted', 'reached': 'contacted', 'called': 'contacted',\n  'qualified': 'qualified', 'good': 'qualified', 'promising': 'qualified',\n  'converted': 'converted', 'closed': 'converted', 'won': 'converted',\n  'lost': 'lost', 'dead': 'lost', 'rejected': 'lost',\n  \n  // Ticket statuses\n  'open': 'open', 'new': 'open', 'active': 'open',\n  'progress': 'in_progress', 'working': 'in_progress', 'processing': 'in_progress',\n  'resolved': 'resolved', 'fixed': 'resolved', 'done': 'resolved', 'completed': 'resolved',\n  'closed': 'closed', 'finished': 'closed',\n  \n  // Project/Task statuses\n  'todo': 'todo', 'pending': 'todo', 'planned': 'todo',\n  'active': 'active', 'current': 'active', 'ongoing': 'active',\n  'completed': 'completed', 'finished': 'completed', 'done': 'completed',\n  'cancelled': 'cancelled', 'canceled': 'cancelled', 'stopped': 'cancelled'\n};\n\nconst PRIORITY_MAPPINGS = {\n  'low': 'low', 'minor': 'low', 'small': 'low',\n  'medium': 'medium', 'normal': 'medium', 'regular': 'medium', 'standard': 'medium',\n  'high': 'high', 'important': 'high', 'urgent': 'high', 'critical': 'high', 'major': 'high'\n};\n\nfunction normalizeText(text: string): string {\n  return text.toLowerCase().replace(/[^\\w\\s]/g, '').trim();\n}\n\nfunction extractIntent(message: string): { action: string; target: string; context: string[] } {\n  const normalizedMessage = normalizeText(message);\n  \n  // Check each intent pattern\n  for (const [intent, patterns] of Object.entries(INTENT_PATTERNS)) {\n    for (const pattern of patterns) {\n      const match = normalizedMessage.match(pattern);\n      if (match) {\n        const target = match[1] || '';\n        const context = match.slice(2).filter(Boolean);\n        return { action: intent, target, context };\n      }\n    }\n  }\n  \n  // Fallback: look for keywords\n  if (normalizedMessage.includes('create') || normalizedMessage.includes('add') || normalizedMessage.includes('new')) {\n    return { action: 'create', target: normalizedMessage, context: [] };\n  }\n  if (normalizedMessage.includes('find') || normalizedMessage.includes('search') || normalizedMessage.includes('show')) {\n    return { action: 'search', target: normalizedMessage, context: [] };\n  }\n  if (normalizedMessage.includes('go') || normalizedMessage.includes('open') || normalizedMessage.includes('navigate')) {\n    return { action: 'navigation', target: normalizedMessage, context: [] };\n  }\n  \n  return { action: 'respond', target: normalizedMessage, context: [] };\n}\n\nfunction generateResponse(intent: { action: string; target: string; context: string[] }, originalMessage: string): AIResponse {\n  const { action, target, context } = intent;\n  \n  // Map target to module\n  const words = target.split(/\\s+/);\n  let module = null;\n  \n  for (const word of words) {\n    if (MODULE_MAPPINGS[word]) {\n      module = MODULE_MAPPINGS[word];\n      break;\n    }\n  }\n  \n  switch (action) {\n    case 'navigation':\n      if (module) {\n        return {\n          action: \"navigate\",\n          module,\n          message: `Navigating to ${module} module.`\n        };\n      } else {\n        return {\n          action: \"respond\",\n          message: \"I can help you navigate to: Dashboard, Leads, Tickets, Deals, Projects, Tasks, Emails, Users, or Companies. Which would you like to visit?\"\n        };\n      }\n      \n    case 'create':\n      if (module) {\n        const entityName = module.slice(0, -1); // Remove 's' from plural\n        return {\n          action: \"open_modal\",\n          module,\n          type: \"create\",\n          message: `Opening form to create a new ${entityName}.`\n        };\n      } else {\n        return {\n          action: \"respond\",\n          message: \"I can help you create: Leads, Tickets, Deals, Projects, Tasks, Emails, Users, or Companies. What would you like to create?\"\n        };\n      }\n      \n    case 'search':\n      if (module) {\n        const searchTerm = context[0] || target.replace(new RegExp(Object.keys(MODULE_MAPPINGS).join('|'), 'gi'), '').trim();\n        return {\n          action: \"navigate\",\n          module,\n          data: { search: searchTerm },\n          message: searchTerm ? `Searching for \"${searchTerm}\" in ${module}.` : `Showing all ${module}.`\n        };\n      } else {\n        return {\n          action: \"respond\",\n          message: \"I can search through: Leads, Tickets, Deals, Projects, Tasks, Emails, Users, or Companies. What would you like to search for?\"\n        };\n      }\n      \n    case 'update':\n      return {\n        action: \"respond\",\n        message: \"To update records, please navigate to the specific module and select the item you want to modify. I can help you navigate there if you tell me what you want to update.\"\n      };\n      \n    case 'delete':\n      return {\n        action: \"respond\",\n        message: \"To delete records, please navigate to the specific module and select the item you want to remove. I can help you navigate there if you tell me what you want to delete.\"\n      };\n      \n    case 'status':\n      if (module === 'dashboard' || target.includes('overview') || target.includes('summary')) {\n        return {\n          action: \"navigate\",\n          module: \"dashboard\",\n          message: \"Showing dashboard with current statistics and overview.\"\n        };\n      } else if (module) {\n        return {\n          action: \"navigate\",\n          module,\n          message: `Showing ${module} status and information.`\n        };\n      } else {\n        return {\n          action: \"navigate\",\n          module: \"dashboard\",\n          message: \"Showing overall system status and statistics.\"\n        };\n      }\n      \n    case 'assign':\n      return {\n        action: \"respond\",\n        message: \"To assign items, please navigate to the specific module (Leads, Tickets, Deals, Projects, or Tasks) and select the item you want to assign. I can help you navigate there.\"\n      };\n      \n    default:\n      // Try to handle common business queries\n      if (originalMessage.toLowerCase().includes('help')) {\n        return {\n          action: \"respond\",\n          message: \"I can help you with: Navigate (go to any module), Create (add new records), Search (find specific items), View status (see dashboard), and manage all your business data. What would you like to do?\"\n        };\n      }\n      \n      if (originalMessage.toLowerCase().includes('stats') || originalMessage.toLowerCase().includes('numbers')) {\n        return {\n          action: \"navigate\",\n          module: \"dashboard\",\n          message: \"Showing your business statistics and key metrics.\"\n        };\n      }\n      \n      return {\n        action: \"respond\",\n        message: \"I understand you want to work with your business data. I can help you navigate to different modules, create new records, search for information, or show statistics. Try saying something like 'show me leads', 'create a new ticket', or 'go to dashboard'.\"\n      };\n  }\n}\n\nexport async function processLocalAIMessage(message: string): Promise<AIResponse> {\n  try {\n    const intent = extractIntent(message);\n    const response = generateResponse(intent, message);\n    \n    // Log for debugging\n    console.log('AI Intent:', intent);\n    console.log('AI Response:', response);\n    \n    return response;\n  } catch (error) {\n    console.error('AI Processing Error:', error);\n    return {\n      action: \"respond\",\n      message: \"I'm having trouble understanding that request. Try asking me to navigate to a specific module, create a new record, or search for information.\"\n    };\n  }\n}\n\nexport function suggestCorrections(message: string): string[] {\n  const suggestions = [];\n  const words = normalizeText(message).split(/\\s+/);\n  \n  // Suggest module names if partial matches found\n  for (const word of words) {\n    for (const [key, value] of Object.entries(MODULE_MAPPINGS)) {\n      if (key.includes(word) || word.includes(key)) {\n        suggestions.push(`Did you mean \"${key}\"?`);\n      }\n    }\n  }\n  \n  // Common suggestions\n  if (message.length < 3) {\n    suggestions.push(\"Try asking me to 'show dashboard' or 'create new lead'\");\n  }\n  \n  return suggestions.slice(0, 3); // Limit to 3 suggestions\n}","size_bytes":11738},"server/routes.ts":{"content":"import { createServer, type Server } from \"http\";\nimport type { Express } from \"express\";\nimport { storage } from \"./storage\";\nimport { \n  insertUserSchema, insertCompanySchema, insertLeadSchema, insertTicketSchema, insertDealSchema, \n  insertProjectSchema, insertTaskSchema, insertEmailSchema, insertUserRoleSchema, insertActivitySchema, insertReportSchema\n} from \"@shared/schema\";\n// Local AI assistant - no external APIs required\nimport { processLocalAIMessage } from \"./localAI\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Initialize basic user roles only (no dummy users)\n  try {\n    const roles = await storage.getUserRoles();\n    if (roles.length === 0) {\n      await storage.createUserRole({ name: \"admin\", description: \"Full system access\", permissions: [\"*\"] });\n      await storage.createUserRole({ name: \"manager\", description: \"Team management\", permissions: [\"read\", \"write\", \"manage_team\"] });\n      await storage.createUserRole({ name: \"user\", description: \"Basic user access\", permissions: [\"read\", \"write\"] });\n    }\n  } catch (error) {\n    console.error(\"Failed to initialize user roles:\", error);\n  }\n\n  // User role routes\n  app.get(\"/api/user-roles\", async (req, res) => {\n    try {\n      const roles = await storage.getUserRoles();\n      res.json(roles);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch user roles\" });\n    }\n  });\n\n  // User routes\n  app.get(\"/api/users\", async (req, res) => {\n    try {\n      const users = await storage.getUsers();\n      res.json(users);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.post(\"/api/users\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      const user = await storage.createUser(userData);\n      res.json(user);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid user data\" });\n    }\n  });\n\n  app.put(\"/api/users/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const userData = insertUserSchema.partial().parse(req.body);\n      const user = await storage.updateUser(id, userData);\n      if (!user) {\n        res.status(404).json({ message: \"User not found\" });\n        return;\n      }\n      res.json(user);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid user data\" });\n    }\n  });\n\n  app.delete(\"/api/users/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const success = await storage.deleteUser(id);\n      if (!success) {\n        res.status(404).json({ message: \"User not found\" });\n        return;\n      }\n      res.json({ message: \"User deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete user\" });\n    }\n  });\n\n  // Company routes\n  app.get(\"/api/companies\", async (req, res) => {\n    try {\n      const companies = await storage.getCompanies();\n      res.json(companies);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch companies\" });\n    }\n  });\n\n  app.post(\"/api/companies\", async (req, res) => {\n    try {\n      const companyData = insertCompanySchema.parse(req.body);\n      const company = await storage.createCompany(companyData);\n      res.json(company);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid company data\" });\n    }\n  });\n\n  app.put(\"/api/companies/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const companyData = insertCompanySchema.partial().parse(req.body);\n      const company = await storage.updateCompany(id, companyData);\n      if (!company) {\n        res.status(404).json({ message: \"Company not found\" });\n        return;\n      }\n      res.json(company);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid company data\" });\n    }\n  });\n\n  app.delete(\"/api/companies/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const success = await storage.deleteCompany(id);\n      if (!success) {\n        res.status(404).json({ message: \"Company not found\" });\n        return;\n      }\n      res.json({ message: \"Company deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete company\" });\n    }\n  });\n\n  // Lead routes\n  app.get(\"/api/leads\", async (req, res) => {\n    try {\n      const leads = await storage.getLeads();\n      res.json(leads);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch leads\" });\n    }\n  });\n\n  app.get(\"/api/leads/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const lead = await storage.getLead(id);\n      if (!lead) {\n        res.status(404).json({ message: \"Lead not found\" });\n        return;\n      }\n      res.json(lead);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch lead\" });\n    }\n  });\n\n  app.post(\"/api/leads\", async (req, res) => {\n    try {\n      const leadData = insertLeadSchema.parse(req.body);\n      const lead = await storage.createLead(leadData);\n      res.json(lead);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid lead data\" });\n    }\n  });\n\n  app.put(\"/api/leads/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const leadData = insertLeadSchema.partial().parse(req.body);\n      const lead = await storage.updateLead(id, leadData);\n      if (!lead) {\n        res.status(404).json({ message: \"Lead not found\" });\n        return;\n      }\n      res.json(lead);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid lead data\" });\n    }\n  });\n\n  app.delete(\"/api/leads/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const success = await storage.deleteLead(id);\n      if (!success) {\n        res.status(404).json({ message: \"Lead not found\" });\n        return;\n      }\n      res.json({ message: \"Lead deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete lead\" });\n    }\n  });\n\n  // Ticket routes\n  app.get(\"/api/tickets\", async (req, res) => {\n    try {\n      const tickets = await storage.getTickets();\n      res.json(tickets);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch tickets\" });\n    }\n  });\n\n  app.get(\"/api/tickets/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const ticket = await storage.getTicket(id);\n      if (!ticket) {\n        res.status(404).json({ message: \"Ticket not found\" });\n        return;\n      }\n      res.json(ticket);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch ticket\" });\n    }\n  });\n\n  app.post(\"/api/tickets\", async (req, res) => {\n    try {\n      const ticketData = insertTicketSchema.parse(req.body);\n      const ticket = await storage.createTicket(ticketData);\n      res.json(ticket);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid ticket data\" });\n    }\n  });\n\n  app.put(\"/api/tickets/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const ticketData = insertTicketSchema.partial().parse(req.body);\n      const ticket = await storage.updateTicket(id, ticketData);\n      if (!ticket) {\n        res.status(404).json({ message: \"Ticket not found\" });\n        return;\n      }\n      res.json(ticket);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid ticket data\" });\n    }\n  });\n\n  app.delete(\"/api/tickets/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const success = await storage.deleteTicket(id);\n      if (!success) {\n        res.status(404).json({ message: \"Ticket not found\" });\n        return;\n      }\n      res.json({ message: \"Ticket deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete ticket\" });\n    }\n  });\n\n  // Deal routes\n  app.get(\"/api/deals\", async (req, res) => {\n    try {\n      const deals = await storage.getDeals();\n      res.json(deals);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch deals\" });\n    }\n  });\n\n  app.get(\"/api/deals/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const deal = await storage.getDeal(id);\n      if (!deal) {\n        res.status(404).json({ message: \"Deal not found\" });\n        return;\n      }\n      res.json(deal);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch deal\" });\n    }\n  });\n\n  app.post(\"/api/deals\", async (req, res) => {\n    try {\n      const dealData = insertDealSchema.parse(req.body);\n      const deal = await storage.createDeal(dealData);\n      res.json(deal);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid deal data\" });\n    }\n  });\n\n  app.put(\"/api/deals/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const dealData = insertDealSchema.partial().parse(req.body);\n      const deal = await storage.updateDeal(id, dealData);\n      if (!deal) {\n        res.status(404).json({ message: \"Deal not found\" });\n        return;\n      }\n      res.json(deal);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid deal data\" });\n    }\n  });\n\n  app.delete(\"/api/deals/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const success = await storage.deleteDeal(id);\n      if (!success) {\n        res.status(404).json({ message: \"Deal not found\" });\n        return;\n      }\n      res.json({ message: \"Deal deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete deal\" });\n    }\n  });\n\n  // Project routes\n  app.get(\"/api/projects\", async (req, res) => {\n    try {\n      const projects = await storage.getProjects();\n      res.json(projects);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch projects\" });\n    }\n  });\n\n  app.get(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const project = await storage.getProject(id);\n      if (!project) {\n        res.status(404).json({ message: \"Project not found\" });\n        return;\n      }\n      res.json(project);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch project\" });\n    }\n  });\n\n  app.post(\"/api/projects\", async (req, res) => {\n    try {\n      const projectData = insertProjectSchema.parse(req.body);\n      const project = await storage.createProject(projectData);\n      res.json(project);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid project data\" });\n    }\n  });\n\n  app.put(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const projectData = insertProjectSchema.partial().parse(req.body);\n      const project = await storage.updateProject(id, projectData);\n      if (!project) {\n        res.status(404).json({ message: \"Project not found\" });\n        return;\n      }\n      res.json(project);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid project data\" });\n    }\n  });\n\n  app.delete(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const success = await storage.deleteProject(id);\n      if (!success) {\n        res.status(404).json({ message: \"Project not found\" });\n        return;\n      }\n      res.json({ message: \"Project deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete project\" });\n    }\n  });\n\n  // Task routes\n  app.get(\"/api/tasks\", async (req, res) => {\n    try {\n      const tasks = await storage.getTasks();\n      res.json(tasks);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch tasks\" });\n    }\n  });\n\n  app.get(\"/api/tasks/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const task = await storage.getTask(id);\n      if (!task) {\n        res.status(404).json({ message: \"Task not found\" });\n        return;\n      }\n      res.json(task);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch task\" });\n    }\n  });\n\n  app.post(\"/api/tasks\", async (req, res) => {\n    try {\n      const taskData = insertTaskSchema.parse(req.body);\n      const task = await storage.createTask(taskData);\n      res.json(task);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid task data\" });\n    }\n  });\n\n  app.put(\"/api/tasks/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const taskData = insertTaskSchema.partial().parse(req.body);\n      const task = await storage.updateTask(id, taskData);\n      if (!task) {\n        res.status(404).json({ message: \"Task not found\" });\n        return;\n      }\n      res.json(task);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid task data\" });\n    }\n  });\n\n  app.delete(\"/api/tasks/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const success = await storage.deleteTask(id);\n      if (!success) {\n        res.status(404).json({ message: \"Task not found\" });\n        return;\n      }\n      res.json({ message: \"Task deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete task\" });\n    }\n  });\n\n  // Email routes\n  app.get(\"/api/emails\", async (req, res) => {\n    try {\n      const emails = await storage.getEmails();\n      res.json(emails);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch emails\" });\n    }\n  });\n\n  app.get(\"/api/emails/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const email = await storage.getEmail(id);\n      if (!email) {\n        res.status(404).json({ message: \"Email not found\" });\n        return;\n      }\n      res.json(email);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch email\" });\n    }\n  });\n\n  app.post(\"/api/emails\", async (req, res) => {\n    try {\n      const emailData = insertEmailSchema.parse(req.body);\n      const email = await storage.createEmail(emailData);\n      res.json(email);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid email data\" });\n    }\n  });\n\n  app.put(\"/api/emails/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const emailData = insertEmailSchema.partial().parse(req.body);\n      const email = await storage.updateEmail(id, emailData);\n      if (!email) {\n        res.status(404).json({ message: \"Email not found\" });\n        return;\n      }\n      res.json(email);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid email data\" });\n    }\n  });\n\n  app.delete(\"/api/emails/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const success = await storage.deleteEmail(id);\n      if (!success) {\n        res.status(404).json({ message: \"Email not found\" });\n        return;\n      }\n      res.json({ message: \"Email deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete email\" });\n    }\n  });\n\n  // Search routes\n  app.get(\"/api/search\", async (req, res) => {\n    try {\n      const { q, type } = req.query;\n      if (!q || typeof q !== \"string\") {\n        res.status(400).json({ message: \"Query parameter 'q' is required\" });\n        return;\n      }\n\n      let results: any = {};\n      \n      if (!type || type === \"leads\") {\n        results.leads = await storage.searchLeads(q);\n      }\n      if (!type || type === \"tickets\") {\n        results.tickets = await storage.searchTickets(q);\n      }\n      if (!type || type === \"deals\") {\n        results.deals = await storage.searchDeals(q);\n      }\n      if (!type || type === \"projects\") {\n        results.projects = await storage.searchProjects(q);\n      }\n\n      res.json(results);\n    } catch (error) {\n      res.status(500).json({ message: \"Search failed\" });\n    }\n  });\n\n  // Local AI Assistant route - no external APIs required\n  app.post(\"/api/ai/chat\", async (req, res) => {\n    try {\n      const { message } = req.body;\n      \n      if (!message) {\n        res.status(400).json({ message: \"Message is required\" });\n        return;\n      }\n\n      const result = await processLocalAIMessage(message.trim());\n      res.json(result);\n    } catch (error) {\n      console.error(\"Local AI Chat error:\", error);\n      res.json({ \n        action: \"respond\", \n        message: \"I'm sorry, I encountered an error. Please try again.\" \n      });\n    }\n  });\n\n  // Enhanced stats route for dashboard\n  app.get(\"/api/stats\", async (req, res) => {\n    try {\n      const [leads, tickets, deals, projects, users] = await Promise.all([\n        storage.getLeads(),\n        storage.getTickets(),\n        storage.getDeals(),\n        storage.getProjects(),\n        storage.getUsers()\n      ]);\n\n      const stats = {\n        totalLeads: leads.length,\n        activeTickets: tickets.filter(t => t.status !== \"resolved\").length,\n        totalRevenue: deals.reduce((sum, deal) => sum + parseFloat(deal.value.toString()), 0),\n        activeProjects: projects.filter(p => p.status === \"active\").length,\n        totalUsers: users.length,\n        recentActivity: [\n          ...leads.slice(-3).map(lead => ({\n            type: \"lead\",\n            message: `New lead created: ${lead.name}`,\n            timestamp: lead.createdAt\n          })),\n          ...tickets.slice(-3).map(ticket => ({\n            type: \"ticket\",\n            message: `Ticket ${ticket.status}: ${ticket.title}`,\n            timestamp: ticket.updatedAt || ticket.createdAt\n          })),\n          ...deals.slice(-3).map(deal => ({\n            type: \"deal\",\n            message: `Deal ${deal.stage}: ${deal.title}`,\n            timestamp: deal.createdAt\n          }))\n        ].sort((a, b) => new Date(b.timestamp || 0).getTime() - new Date(a.timestamp || 0).getTime()).slice(0, 10)\n      };\n\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch stats\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":18196},"server/storage.ts":{"content":"import { \n  users, leads, tickets, deals, projects, tasks, emails, companies, userRoles, activities, reports,\n  type User, type Lead, type Ticket, type Deal, type Project, type Task, type Email, type Company, type UserRole, type Activity, type Report,\n  type InsertUser, type InsertLead, type InsertTicket, type InsertDeal, type InsertProject, type InsertTask, type InsertEmail, type InsertCompany, type InsertUserRole, type InsertActivity, type InsertReport\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, or, desc, asc, like } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User roles\n  getUserRoles(): Promise<UserRole[]>;\n  createUserRole(userRole: InsertUserRole): Promise<UserRole>;\n  \n  // Users\n  getUsers(): Promise<User[]>;\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: number, updates: Partial<InsertUser>): Promise<User | undefined>;\n  deleteUser(id: number): Promise<boolean>;\n  \n  // Companies\n  getCompanies(): Promise<Company[]>;\n  getCompany(id: number): Promise<Company | undefined>;\n  createCompany(company: InsertCompany): Promise<Company>;\n  updateCompany(id: number, updates: Partial<InsertCompany>): Promise<Company | undefined>;\n  deleteCompany(id: number): Promise<boolean>;\n  \n  // Leads\n  getLeads(): Promise<Lead[]>;\n  getLead(id: number): Promise<Lead | undefined>;\n  getLeadsByAssignee(assigneeId: number): Promise<Lead[]>;\n  createLead(lead: InsertLead): Promise<Lead>;\n  updateLead(id: number, updates: Partial<InsertLead>): Promise<Lead | undefined>;\n  deleteLead(id: number): Promise<boolean>;\n  \n  // Tickets\n  getTickets(): Promise<Ticket[]>;\n  getTicket(id: number): Promise<Ticket | undefined>;\n  getTicketsByAssignee(assigneeId: number): Promise<Ticket[]>;\n  createTicket(ticket: InsertTicket): Promise<Ticket>;\n  updateTicket(id: number, updates: Partial<InsertTicket>): Promise<Ticket | undefined>;\n  deleteTicket(id: number): Promise<boolean>;\n  \n  // Deals\n  getDeals(): Promise<Deal[]>;\n  getDeal(id: number): Promise<Deal | undefined>;\n  getDealsByAssignee(assigneeId: number): Promise<Deal[]>;\n  createDeal(deal: InsertDeal): Promise<Deal>;\n  updateDeal(id: number, updates: Partial<InsertDeal>): Promise<Deal | undefined>;\n  deleteDeal(id: number): Promise<boolean>;\n  \n  // Projects\n  getProjects(): Promise<Project[]>;\n  getProject(id: number): Promise<Project | undefined>;\n  getProjectsByManager(managerId: number): Promise<Project[]>;\n  createProject(project: InsertProject): Promise<Project>;\n  updateProject(id: number, updates: Partial<InsertProject>): Promise<Project | undefined>;\n  deleteProject(id: number): Promise<boolean>;\n  \n  // Tasks\n  getTasks(): Promise<Task[]>;\n  getTask(id: number): Promise<Task | undefined>;\n  getTasksByProject(projectId: number): Promise<Task[]>;\n  getTasksByAssignee(assigneeId: number): Promise<Task[]>;\n  createTask(task: InsertTask): Promise<Task>;\n  updateTask(id: number, updates: Partial<InsertTask>): Promise<Task | undefined>;\n  deleteTask(id: number): Promise<boolean>;\n  \n  // Emails\n  getEmails(): Promise<Email[]>;\n  getEmail(id: number): Promise<Email | undefined>;\n  getEmailsByLead(leadId: number): Promise<Email[]>;\n  createEmail(email: InsertEmail): Promise<Email>;\n  updateEmail(id: number, updates: Partial<InsertEmail>): Promise<Email | undefined>;\n  deleteEmail(id: number): Promise<boolean>;\n  \n  // Activities\n  getActivities(): Promise<Activity[]>;\n  getActivity(id: number): Promise<Activity | undefined>;\n  getActivitiesByUser(userId: number): Promise<Activity[]>;\n  createActivity(activity: InsertActivity): Promise<Activity>;\n  \n  // Reports\n  getReports(): Promise<Report[]>;\n  getReport(id: number): Promise<Report | undefined>;\n  createReport(report: InsertReport): Promise<Report>;\n  updateReport(id: number, updates: Partial<InsertReport>): Promise<Report | undefined>;\n  deleteReport(id: number): Promise<boolean>;\n  \n  // Search functions\n  searchLeads(query: string): Promise<Lead[]>;\n  searchTickets(query: string): Promise<Ticket[]>;\n  searchDeals(query: string): Promise<Deal[]>;\n  searchProjects(query: string): Promise<Project[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User roles\n  async getUserRoles(): Promise<UserRole[]> {\n    return await db.select().from(userRoles).orderBy(asc(userRoles.name));\n  }\n  \n  async createUserRole(userRole: InsertUserRole): Promise<UserRole> {\n    const [result] = await db.insert(userRoles).values([userRole]).returning();\n    return result;\n  }\n  \n  // Users\n  async getUsers(): Promise<User[]> {\n    return await db.select().from(users).orderBy(asc(users.fullName));\n  }\n  \n  async getUser(id: number): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n  \n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user;\n  }\n  \n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n  \n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n  \n  async updateUser(id: number, updates: Partial<InsertUser>): Promise<User | undefined> {\n    const [user] = await db.update(users).set(updates).where(eq(users.id, id)).returning();\n    return user;\n  }\n  \n  async deleteUser(id: number): Promise<boolean> {\n    const result = await db.delete(users).where(eq(users.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n  \n  // Companies\n  async getCompanies(): Promise<Company[]> {\n    return await db.select().from(companies).orderBy(asc(companies.name));\n  }\n  \n  async getCompany(id: number): Promise<Company | undefined> {\n    const [company] = await db.select().from(companies).where(eq(companies.id, id));\n    return company;\n  }\n  \n  async createCompany(insertCompany: InsertCompany): Promise<Company> {\n    const [company] = await db.insert(companies).values(insertCompany).returning();\n    return company;\n  }\n  \n  async updateCompany(id: number, updates: Partial<InsertCompany>): Promise<Company | undefined> {\n    const [company] = await db.update(companies).set(updates).where(eq(companies.id, id)).returning();\n    return company;\n  }\n  \n  async deleteCompany(id: number): Promise<boolean> {\n    const result = await db.delete(companies).where(eq(companies.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n  \n  // Leads\n  async getLeads(): Promise<Lead[]> {\n    return await db.select().from(leads).orderBy(desc(leads.createdAt));\n  }\n  \n  async getLead(id: number): Promise<Lead | undefined> {\n    const [lead] = await db.select().from(leads).where(eq(leads.id, id));\n    return lead;\n  }\n  \n  async getLeadsByAssignee(assigneeId: number): Promise<Lead[]> {\n    return await db.select().from(leads).where(eq(leads.assignedTo, assigneeId));\n  }\n  \n  async createLead(insertLead: InsertLead): Promise<Lead> {\n    const [lead] = await db.insert(leads).values(insertLead).returning();\n    return lead;\n  }\n  \n  async updateLead(id: number, updates: Partial<InsertLead>): Promise<Lead | undefined> {\n    const [lead] = await db.update(leads).set(updates).where(eq(leads.id, id)).returning();\n    return lead;\n  }\n  \n  async deleteLead(id: number): Promise<boolean> {\n    const result = await db.delete(leads).where(eq(leads.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n  \n  // Tickets\n  async getTickets(): Promise<Ticket[]> {\n    return await db.select().from(tickets).orderBy(desc(tickets.createdAt));\n  }\n  \n  async getTicket(id: number): Promise<Ticket | undefined> {\n    const [ticket] = await db.select().from(tickets).where(eq(tickets.id, id));\n    return ticket;\n  }\n  \n  async getTicketsByAssignee(assigneeId: number): Promise<Ticket[]> {\n    return await db.select().from(tickets).where(eq(tickets.assignedTo, assigneeId));\n  }\n  \n  async createTicket(insertTicket: InsertTicket): Promise<Ticket> {\n    const [ticket] = await db.insert(tickets).values(insertTicket).returning();\n    return ticket;\n  }\n  \n  async updateTicket(id: number, updates: Partial<InsertTicket>): Promise<Ticket | undefined> {\n    const [ticket] = await db.update(tickets).set(updates).where(eq(tickets.id, id)).returning();\n    return ticket;\n  }\n  \n  async deleteTicket(id: number): Promise<boolean> {\n    const result = await db.delete(tickets).where(eq(tickets.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n  \n  // Deals\n  async getDeals(): Promise<Deal[]> {\n    return await db.select().from(deals).orderBy(desc(deals.createdAt));\n  }\n  \n  async getDeal(id: number): Promise<Deal | undefined> {\n    const [deal] = await db.select().from(deals).where(eq(deals.id, id));\n    return deal;\n  }\n  \n  async getDealsByAssignee(assigneeId: number): Promise<Deal[]> {\n    return await db.select().from(deals).where(eq(deals.assignedTo, assigneeId));\n  }\n  \n  async createDeal(insertDeal: InsertDeal): Promise<Deal> {\n    const [deal] = await db.insert(deals).values(insertDeal).returning();\n    return deal;\n  }\n  \n  async updateDeal(id: number, updates: Partial<InsertDeal>): Promise<Deal | undefined> {\n    const [deal] = await db.update(deals).set(updates).where(eq(deals.id, id)).returning();\n    return deal;\n  }\n  \n  async deleteDeal(id: number): Promise<boolean> {\n    const result = await db.delete(deals).where(eq(deals.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n  \n  // Projects\n  async getProjects(): Promise<Project[]> {\n    return await db.select().from(projects).orderBy(desc(projects.createdAt));\n  }\n  \n  async getProject(id: number): Promise<Project | undefined> {\n    const [project] = await db.select().from(projects).where(eq(projects.id, id));\n    return project;\n  }\n  \n  async getProjectsByManager(managerId: number): Promise<Project[]> {\n    return await db.select().from(projects).where(eq(projects.managerId, managerId));\n  }\n  \n  async createProject(insertProject: InsertProject): Promise<Project> {\n    const [project] = await db.insert(projects).values(insertProject).returning();\n    return project;\n  }\n  \n  async updateProject(id: number, updates: Partial<InsertProject>): Promise<Project | undefined> {\n    const [project] = await db.update(projects).set(updates).where(eq(projects.id, id)).returning();\n    return project;\n  }\n  \n  async deleteProject(id: number): Promise<boolean> {\n    const result = await db.delete(projects).where(eq(projects.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n  \n  // Tasks\n  async getTasks(): Promise<Task[]> {\n    return await db.select().from(tasks).orderBy(desc(tasks.createdAt));\n  }\n  \n  async getTask(id: number): Promise<Task | undefined> {\n    const [task] = await db.select().from(tasks).where(eq(tasks.id, id));\n    return task;\n  }\n  \n  async getTasksByProject(projectId: number): Promise<Task[]> {\n    return await db.select().from(tasks).where(eq(tasks.projectId, projectId));\n  }\n  \n  async getTasksByAssignee(assigneeId: number): Promise<Task[]> {\n    return await db.select().from(tasks).where(eq(tasks.assignedTo, assigneeId));\n  }\n  \n  async createTask(insertTask: InsertTask): Promise<Task> {\n    const [task] = await db.insert(tasks).values(insertTask).returning();\n    return task;\n  }\n  \n  async updateTask(id: number, updates: Partial<InsertTask>): Promise<Task | undefined> {\n    const [task] = await db.update(tasks).set(updates).where(eq(tasks.id, id)).returning();\n    return task;\n  }\n  \n  async deleteTask(id: number): Promise<boolean> {\n    const result = await db.delete(tasks).where(eq(tasks.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n  \n  // Emails\n  async getEmails(): Promise<Email[]> {\n    return await db.select().from(emails).orderBy(desc(emails.sentAt));\n  }\n  \n  async getEmail(id: number): Promise<Email | undefined> {\n    const [email] = await db.select().from(emails).where(eq(emails.id, id));\n    return email;\n  }\n  \n  async getEmailsByLead(leadId: number): Promise<Email[]> {\n    return await db.select().from(emails).where(eq(emails.leadId, leadId));\n  }\n  \n  async createEmail(insertEmail: InsertEmail): Promise<Email> {\n    const [email] = await db.insert(emails).values([insertEmail]).returning();\n    return email;\n  }\n  \n  async updateEmail(id: number, updates: Partial<InsertEmail>): Promise<Email | undefined> {\n    const cleanUpdates = Object.fromEntries(\n      Object.entries(updates).filter(([key, value]) => value !== undefined)\n    );\n    const [email] = await db.update(emails).set(cleanUpdates).where(eq(emails.id, id)).returning();\n    return email;\n  }\n  \n  async deleteEmail(id: number): Promise<boolean> {\n    const result = await db.delete(emails).where(eq(emails.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n  \n  // Activities\n  async getActivities(): Promise<Activity[]> {\n    return await db.select().from(activities).orderBy(desc(activities.createdAt));\n  }\n  \n  async getActivity(id: number): Promise<Activity | undefined> {\n    const [activity] = await db.select().from(activities).where(eq(activities.id, id));\n    return activity;\n  }\n  \n  async getActivitiesByUser(userId: number): Promise<Activity[]> {\n    return await db.select().from(activities).where(eq(activities.userId, userId));\n  }\n  \n  async createActivity(insertActivity: InsertActivity): Promise<Activity> {\n    const [activity] = await db.insert(activities).values(insertActivity).returning();\n    return activity;\n  }\n  \n  // Reports\n  async getReports(): Promise<Report[]> {\n    return await db.select().from(reports).orderBy(desc(reports.createdAt));\n  }\n  \n  async getReport(id: number): Promise<Report | undefined> {\n    const [report] = await db.select().from(reports).where(eq(reports.id, id));\n    return report;\n  }\n  \n  async createReport(insertReport: InsertReport): Promise<Report> {\n    const [report] = await db.insert(reports).values(insertReport).returning();\n    return report;\n  }\n  \n  async updateReport(id: number, updates: Partial<InsertReport>): Promise<Report | undefined> {\n    const [report] = await db.update(reports).set(updates).where(eq(reports.id, id)).returning();\n    return report;\n  }\n  \n  async deleteReport(id: number): Promise<boolean> {\n    const result = await db.delete(reports).where(eq(reports.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n  \n  // Search functions\n  async searchLeads(query: string): Promise<Lead[]> {\n    return await db.select().from(leads).where(\n      or(\n        like(leads.name, `%${query}%`),\n        like(leads.email, `%${query}%`),\n        like(leads.notes, `%${query}%`)\n      )\n    );\n  }\n  \n  async searchTickets(query: string): Promise<Ticket[]> {\n    return await db.select().from(tickets).where(\n      or(\n        like(tickets.title, `%${query}%`),\n        like(tickets.description, `%${query}%`)\n      )\n    );\n  }\n  \n  async searchDeals(query: string): Promise<Deal[]> {\n    return await db.select().from(deals).where(\n      or(\n        like(deals.title, `%${query}%`),\n        like(deals.notes, `%${query}%`)\n      )\n    );\n  }\n  \n  async searchProjects(query: string): Promise<Project[]> {\n    return await db.select().from(projects).where(\n      or(\n        like(projects.name, `%${query}%`),\n        like(projects.description, `%${query}%`)\n      )\n    );\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":15547},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { pgTable, text, varchar, timestamp, integer, serial, boolean, decimal, json } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\n// User roles and permissions\nexport const userRoles = pgTable(\"user_roles\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 50 }).unique().notNull(),\n  description: text(\"description\"),\n  permissions: json(\"permissions\").$type<string[]>().default([]),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: varchar(\"username\", { length: 255 }).unique().notNull(),\n  email: varchar(\"email\", { length: 255 }).unique().notNull(),\n  password: varchar(\"password\", { length: 255 }).notNull(),\n  fullName: varchar(\"full_name\", { length: 255 }),\n  phone: varchar(\"phone\", { length: 50 }),\n  avatar: varchar(\"avatar\", { length: 500 }),\n  roleId: integer(\"role_id\").references(() => userRoles.id).default(1),\n  isActive: boolean(\"is_active\").default(true),\n  lastLogin: timestamp(\"last_login\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const companies = pgTable(\"companies\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  industry: varchar(\"industry\", { length: 100 }),\n  website: varchar(\"website\", { length: 255 }),\n  phone: varchar(\"phone\", { length: 50 }),\n  email: varchar(\"email\", { length: 255 }),\n  address: text(\"address\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const leads = pgTable(\"leads\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  email: varchar(\"email\", { length: 255 }).notNull(),\n  phone: varchar(\"phone\", { length: 50 }),\n  jobTitle: varchar(\"job_title\", { length: 100 }),\n  companyId: integer(\"company_id\").references(() => companies.id),\n  status: varchar(\"status\", { length: 50 }).default(\"new\"),\n  priority: varchar(\"priority\", { length: 50 }).default(\"medium\"),\n  source: varchar(\"source\", { length: 100 }),\n  tags: text(\"tags\").array(),\n  notes: text(\"notes\"),\n  assignedTo: integer(\"assigned_to\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  lastContactedAt: timestamp(\"last_contacted_at\"),\n});\n\nexport const tickets = pgTable(\"tickets\", {\n  id: serial(\"id\").primaryKey(),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  description: text(\"description\").notNull(),\n  status: varchar(\"status\", { length: 50 }).default(\"open\"),\n  priority: varchar(\"priority\", { length: 50 }).default(\"medium\"),\n  category: varchar(\"category\", { length: 100 }),\n  assignedTo: integer(\"assigned_to\").references(() => users.id),\n  reportedBy: integer(\"reported_by\").references(() => users.id),\n  leadId: integer(\"lead_id\").references(() => leads.id),\n  resolution: text(\"resolution\"),\n  tags: text(\"tags\").array(),\n  dueDate: timestamp(\"due_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const deals = pgTable(\"deals\", {\n  id: serial(\"id\").primaryKey(),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  value: decimal(\"value\", { precision: 12, scale: 2 }).notNull(),\n  stage: varchar(\"stage\", { length: 50 }).default(\"prospecting\"),\n  probability: integer(\"probability\").default(0),\n  leadId: integer(\"lead_id\").references(() => leads.id),\n  companyId: integer(\"company_id\").references(() => companies.id),\n  assignedTo: integer(\"assigned_to\").references(() => users.id),\n  expectedCloseDate: timestamp(\"expected_close_date\"),\n  actualCloseDate: timestamp(\"actual_close_date\"),\n  notes: text(\"notes\"),\n  tags: text(\"tags\").array(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const projects = pgTable(\"projects\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  status: varchar(\"status\", { length: 50 }).default(\"active\"),\n  priority: varchar(\"priority\", { length: 50 }).default(\"medium\"),\n  progress: integer(\"progress\").default(0),\n  budget: decimal(\"budget\", { precision: 12, scale: 2 }),\n  clientId: integer(\"client_id\").references(() => companies.id),\n  managerId: integer(\"manager_id\").references(() => users.id),\n  startDate: timestamp(\"start_date\"),\n  endDate: timestamp(\"end_date\"),\n  tags: text(\"tags\").array(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const tasks = pgTable(\"tasks\", {\n  id: serial(\"id\").primaryKey(),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  status: varchar(\"status\", { length: 50 }).default(\"todo\"),\n  priority: varchar(\"priority\", { length: 50 }).default(\"medium\"),\n  assignedTo: integer(\"assigned_to\").references(() => users.id),\n  projectId: integer(\"project_id\").references(() => projects.id),\n  parentTaskId: integer(\"parent_task_id\"),\n  estimatedHours: decimal(\"estimated_hours\", { precision: 5, scale: 2 }),\n  actualHours: decimal(\"actual_hours\", { precision: 5, scale: 2 }),\n  dueDate: timestamp(\"due_date\"),\n  startDate: timestamp(\"start_date\"),\n  completedAt: timestamp(\"completed_at\"),\n  tags: text(\"tags\").array(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const emails = pgTable(\"emails\", {\n  id: serial(\"id\").primaryKey(),\n  to: varchar(\"to\", { length: 255 }).notNull(),\n  cc: varchar(\"cc\", { length: 500 }),\n  bcc: varchar(\"bcc\", { length: 500 }),\n  subject: varchar(\"subject\", { length: 255 }).notNull(),\n  body: text(\"body\").notNull(),\n  status: varchar(\"status\", { length: 50 }).default(\"sent\"),\n  type: varchar(\"type\", { length: 50 }).default(\"outbound\"),\n  leadId: integer(\"lead_id\").references(() => leads.id),\n  ticketId: integer(\"ticket_id\").references(() => tickets.id),\n  dealId: integer(\"deal_id\").references(() => deals.id),\n  sentBy: integer(\"sent_by\").references(() => users.id),\n  sentAt: timestamp(\"sent_at\").defaultNow(),\n  attachments: json(\"attachments\").$type<string[]>().default([]),\n});\n\nexport const activities = pgTable(\"activities\", {\n  id: serial(\"id\").primaryKey(),\n  type: varchar(\"type\", { length: 50 }).notNull(),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  entityType: varchar(\"entity_type\", { length: 50 }),\n  entityId: integer(\"entity_id\"),\n  userId: integer(\"user_id\").references(() => users.id),\n  metadata: json(\"metadata\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const reports = pgTable(\"reports\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  type: varchar(\"type\", { length: 50 }).notNull(),\n  description: text(\"description\"),\n  config: json(\"config\").notNull(),\n  createdBy: integer(\"created_by\").references(() => users.id),\n  isPublic: boolean(\"is_public\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const userRolesRelations = relations(userRoles, ({ many }) => ({\n  users: many(users),\n}));\n\nexport const usersRelations = relations(users, ({ one, many }) => ({\n  role: one(userRoles, { fields: [users.roleId], references: [userRoles.id] }),\n  assignedLeads: many(leads),\n  assignedTickets: many(tickets),\n  assignedDeals: many(deals),\n  managedProjects: many(projects),\n  assignedTasks: many(tasks),\n  sentEmails: many(emails),\n  activities: many(activities),\n  reports: many(reports),\n}));\n\nexport const companiesRelations = relations(companies, ({ many }) => ({\n  leads: many(leads),\n  deals: many(deals),\n  projects: many(projects),\n}));\n\nexport const leadsRelations = relations(leads, ({ one, many }) => ({\n  company: one(companies, { fields: [leads.companyId], references: [companies.id] }),\n  assignedUser: one(users, { fields: [leads.assignedTo], references: [users.id] }),\n  deals: many(deals),\n  tickets: many(tickets),\n  emails: many(emails),\n}));\n\nexport const ticketsRelations = relations(tickets, ({ one, many }) => ({\n  assignedUser: one(users, { fields: [tickets.assignedTo], references: [users.id] }),\n  reportedByUser: one(users, { fields: [tickets.reportedBy], references: [users.id] }),\n  lead: one(leads, { fields: [tickets.leadId], references: [leads.id] }),\n  emails: many(emails),\n}));\n\nexport const dealsRelations = relations(deals, ({ one }) => ({\n  lead: one(leads, { fields: [deals.leadId], references: [leads.id] }),\n  company: one(companies, { fields: [deals.companyId], references: [companies.id] }),\n  assignedUser: one(users, { fields: [deals.assignedTo], references: [users.id] }),\n}));\n\nexport const projectsRelations = relations(projects, ({ one, many }) => ({\n  client: one(companies, { fields: [projects.clientId], references: [companies.id] }),\n  manager: one(users, { fields: [projects.managerId], references: [users.id] }),\n  tasks: many(tasks),\n}));\n\nexport const tasksRelations = relations(tasks, ({ one, many }) => ({\n  assignedUser: one(users, { fields: [tasks.assignedTo], references: [users.id] }),\n  project: one(projects, { fields: [tasks.projectId], references: [projects.id] }),\n  parentTask: one(tasks, { fields: [tasks.parentTaskId], references: [tasks.id], relationName: \"parentTask\" }),\n  subtasks: many(tasks, { relationName: \"parentTask\" }),\n}));\n\nexport const emailsRelations = relations(emails, ({ one }) => ({\n  lead: one(leads, { fields: [emails.leadId], references: [leads.id] }),\n  ticket: one(tickets, { fields: [emails.ticketId], references: [tickets.id] }),\n  deal: one(deals, { fields: [emails.dealId], references: [deals.id] }),\n  sentByUser: one(users, { fields: [emails.sentBy], references: [users.id] }),\n}));\n\nexport const activitiesRelations = relations(activities, ({ one }) => ({\n  user: one(users, { fields: [activities.userId], references: [users.id] }),\n}));\n\nexport const reportsRelations = relations(reports, ({ one }) => ({\n  createdByUser: one(users, { fields: [reports.createdBy], references: [users.id] }),\n}));\n\n// Insert schemas\nexport const insertUserRoleSchema = createInsertSchema(userRoles).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  lastLogin: true,\n});\n\nexport const insertCompanySchema = createInsertSchema(companies).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertLeadSchema = createInsertSchema(leads).omit({\n  id: true,\n  createdAt: true,\n  lastContactedAt: true,\n});\n\nexport const insertTicketSchema = createInsertSchema(tickets).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertDealSchema = createInsertSchema(deals).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProjectSchema = createInsertSchema(projects).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTaskSchema = createInsertSchema(tasks).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertEmailSchema = createInsertSchema(emails).omit({\n  id: true,\n  sentAt: true,\n});\n\nexport const insertActivitySchema = createInsertSchema(activities).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertReportSchema = createInsertSchema(reports).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type UserRole = typeof userRoles.$inferSelect;\nexport type InsertUserRole = z.infer<typeof insertUserRoleSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Company = typeof companies.$inferSelect;\nexport type InsertCompany = z.infer<typeof insertCompanySchema>;\nexport type Lead = typeof leads.$inferSelect;\nexport type InsertLead = z.infer<typeof insertLeadSchema>;\nexport type Ticket = typeof tickets.$inferSelect;\nexport type InsertTicket = z.infer<typeof insertTicketSchema>;\nexport type Deal = typeof deals.$inferSelect;\nexport type InsertDeal = z.infer<typeof insertDealSchema>;\nexport type Project = typeof projects.$inferSelect;\nexport type InsertProject = z.infer<typeof insertProjectSchema>;\nexport type Task = typeof tasks.$inferSelect;\nexport type InsertTask = z.infer<typeof insertTaskSchema>;\nexport type Email = typeof emails.$inferSelect;\nexport type InsertEmail = z.infer<typeof insertEmailSchema>;\nexport type Activity = typeof activities.$inferSelect;\nexport type InsertActivity = z.infer<typeof insertActivitySchema>;\nexport type Report = typeof reports.$inferSelect;\nexport type InsertReport = z.infer<typeof insertReportSchema>;","size_bytes":12493},"client/src/App.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Layout from \"@/components/Layout\";\nimport AIAssistant from \"@/components/AIAssistant\";\nimport Dashboard from \"@/pages/dashboard\";\nimport LeadsPage from \"@/pages/leads\";\nimport TicketsPage from \"@/pages/tickets\";\nimport DealsPage from \"@/pages/deals\";\nimport ProjectsPage from \"@/pages/projects\";\nimport TasksPage from \"@/pages/tasks\";\nimport EmailsPage from \"@/pages/emails\";\nimport UsersPage from \"@/pages/users\";\nimport CompaniesPage from \"@/pages/companies\";\nimport ReportsPage from \"@/pages/reports\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const [activeModule, setActiveModule] = useState(\"dashboard\");\n  const [aiOpen, setAiOpen] = useState(false);\n\n  // Listen for AI toggle event\n  useEffect(() => {\n    const handleToggleAI = () => {\n      setAiOpen(!aiOpen);\n    };\n    \n    window.addEventListener('toggle-ai', handleToggleAI);\n    return () => window.removeEventListener('toggle-ai', handleToggleAI);\n  }, [aiOpen]);\n\n  const handleModuleChange = (module: string) => {\n    setActiveModule(module);\n    // Navigate to the module programmatically\n    window.history.pushState({}, '', module === 'dashboard' ? '/' : `/${module}`);\n  };\n\n  const handleAINavigate = (module: string, data?: any) => {\n    setActiveModule(module);\n    window.history.pushState({}, '', module === 'dashboard' ? '/' : `/${module}`);\n    // Handle search data if provided\n    if (data?.search) {\n      console.log('AI Search:', data.search, 'in', module);\n    }\n  };\n\n  const handleAIOpenModal = (module: string, type: string) => {\n    console.log('AI Open Modal:', module, type);\n    // This would trigger modal opening in the target module\n  };\n\n  return (\n    <Layout activeModule={activeModule} onModuleChange={handleModuleChange}>\n      <Switch>\n        <Route path=\"/\" component={Dashboard} />\n        <Route path=\"/dashboard\" component={Dashboard} />\n        <Route path=\"/leads\" component={LeadsPage} />\n        <Route path=\"/tickets\" component={TicketsPage} />\n        <Route path=\"/deals\" component={DealsPage} />\n        <Route path=\"/projects\" component={ProjectsPage} />\n        <Route path=\"/tasks\" component={TasksPage} />\n        <Route path=\"/emails\" component={EmailsPage} />\n        <Route path=\"/users\" component={UsersPage} />\n        <Route path=\"/companies\" component={CompaniesPage} />\n        <Route path=\"/reports\" component={ReportsPage} />\n        <Route component={NotFound} />\n      </Switch>\n      \n      <AIAssistant \n        isOpen={aiOpen} \n        onClose={() => setAiOpen(false)}\n        onNavigate={handleAINavigate}\n        onOpenModal={handleAIOpenModal}\n      />\n    </Layout>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3165},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":1681},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AIAssistant.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Send, X, Bot, User } from \"lucide-react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface AIMessage {\n  id: string;\n  type: \"user\" | \"ai\";\n  content: string;\n  timestamp: Date;\n}\n\ninterface AIResponse {\n  action: \"navigate\" | \"create\" | \"respond\" | \"open_modal\";\n  module?: string;\n  type?: string;\n  data?: any;\n  message?: string;\n}\n\ninterface AIAssistantProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onNavigate?: (module: string, data?: any) => void;\n  onOpenModal?: (module: string, type: string) => void;\n}\n\nexport default function AIAssistant({ isOpen, onClose, onNavigate, onOpenModal }: AIAssistantProps) {\n  const [messages, setMessages] = useState<AIMessage[]>([\n    {\n      id: \"1\",\n      type: \"ai\",\n      content: \"Hello! I'm your FlowCore AI assistant. I can help you navigate, create records, search for information, and manage your business data. Try asking me something like 'show me leads' or 'create a new ticket'.\",\n      timestamp: new Date()\n    }\n  ]);\n  const [input, setInput] = useState(\"\");\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const chatMutation = useMutation({\n    mutationFn: async (message: string) => {\n      return await apiRequest(`/api/ai/chat`, {\n        method: \"POST\",\n        body: JSON.stringify({ message }),\n        headers: { \"Content-Type\": \"application/json\" }\n      });\n    },\n    onSuccess: (response: AIResponse) => {\n      // Add AI response to messages\n      const aiMessage: AIMessage = {\n        id: Date.now().toString(),\n        type: \"ai\",\n        content: response.message || \"I've completed your request.\",\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, aiMessage]);\n\n      // Handle AI actions\n      if (response.action === \"navigate\" && response.module && onNavigate) {\n        onNavigate(response.module, response.data);\n      } else if (response.action === \"open_modal\" && response.module && response.type && onOpenModal) {\n        onOpenModal(response.module, response.type);\n      }\n    },\n    onError: () => {\n      const errorMessage: AIMessage = {\n        id: Date.now().toString(),\n        type: \"ai\",\n        content: \"I'm sorry, I encountered an error. Please try again.\",\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    }\n  });\n\n  const handleSend = () => {\n    if (!input.trim()) return;\n\n    // Add user message\n    const userMessage: AIMessage = {\n      id: Date.now().toString(),\n      type: \"user\",\n      content: input,\n      timestamp: new Date()\n    };\n    setMessages(prev => [...prev, userMessage]);\n\n    // Send to AI\n    chatMutation.mutate(input);\n    setInput(\"\");\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 flex items-end justify-end p-4 z-50\">\n      <Card className=\"w-96 h-[600px] flex flex-col\">\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <Bot className=\"w-5 h-5 text-blue-600\" />\n            AI Assistant\n          </CardTitle>\n          <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n            <X className=\"w-4 h-4\" />\n          </Button>\n        </CardHeader>\n        \n        <CardContent className=\"flex-1 flex flex-col space-y-4\">\n          {/* Messages */}\n          <div className=\"flex-1 overflow-y-auto space-y-3\">\n            {messages.map((message) => (\n              <div\n                key={message.id}\n                className={`flex items-start gap-2 ${\n                  message.type === \"user\" ? \"justify-end\" : \"justify-start\"\n                }`}\n              >\n                {message.type === \"ai\" && (\n                  <div className=\"w-8 h-8 rounded-full bg-blue-100 dark:bg-blue-900 flex items-center justify-center\">\n                    <Bot className=\"w-4 h-4 text-blue-600 dark:text-blue-400\" />\n                  </div>\n                )}\n                \n                <div\n                  className={`max-w-[80%] rounded-lg px-3 py-2 ${\n                    message.type === \"user\"\n                      ? \"bg-blue-600 text-white\"\n                      : \"bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-gray-100\"\n                  }`}\n                >\n                  <p className=\"text-sm\">{message.content}</p>\n                  <p className=\"text-xs opacity-70 mt-1\">\n                    {message.timestamp.toLocaleTimeString([], { \n                      hour: '2-digit', \n                      minute: '2-digit' \n                    })}\n                  </p>\n                </div>\n                \n                {message.type === \"user\" && (\n                  <div className=\"w-8 h-8 rounded-full bg-gray-200 dark:bg-gray-700 flex items-center justify-center\">\n                    <User className=\"w-4 h-4 text-gray-600 dark:text-gray-400\" />\n                  </div>\n                )}\n              </div>\n            ))}\n            \n            {chatMutation.isPending && (\n              <div className=\"flex items-start gap-2\">\n                <div className=\"w-8 h-8 rounded-full bg-blue-100 dark:bg-blue-900 flex items-center justify-center\">\n                  <Bot className=\"w-4 h-4 text-blue-600 dark:text-blue-400\" />\n                </div>\n                <div className=\"bg-gray-100 dark:bg-gray-800 rounded-lg px-3 py-2\">\n                  <div className=\"flex space-x-1\">\n                    <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"></div>\n                    <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                    <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n                  </div>\n                </div>\n              </div>\n            )}\n            <div ref={messagesEndRef} />\n          </div>\n          \n          {/* Input */}\n          <div className=\"flex gap-2\">\n            <Input\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              onKeyDown={handleKeyPress}\n              placeholder=\"Ask me anything about your business...\"\n              disabled={chatMutation.isPending}\n              className=\"flex-1\"\n            />\n            <Button \n              onClick={handleSend} \n              disabled={!input.trim() || chatMutation.isPending}\n              size=\"sm\"\n            >\n              <Send className=\"w-4 h-4\" />\n            </Button>\n          </div>\n          \n          {/* Quick Actions */}\n          <div className=\"flex flex-wrap gap-1\">\n            {[\n              \"Show dashboard\",\n              \"Create new lead\",\n              \"View tickets\",\n              \"Show all deals\",\n              \"Create project\"\n            ].map((suggestion) => (\n              <Button\n                key={suggestion}\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => {\n                  setInput(suggestion);\n                  setTimeout(handleSend, 100);\n                }}\n                className=\"text-xs\"\n              >\n                {suggestion}\n              </Button>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":7834},"client/src/components/Layout.tsx":{"content":"import { ReactNode } from \"react\";\nimport Sidebar from \"./Sidebar\";\n\ninterface LayoutProps {\n  children: ReactNode;\n  activeModule: string;\n  onModuleChange: (module: string) => void;\n}\n\nexport default function Layout({ children, activeModule, onModuleChange }: LayoutProps) {\n  return (\n    <div className=\"flex h-screen bg-gray-50 dark:bg-gray-900\">\n      <Sidebar activeModule={activeModule} onModuleChange={onModuleChange} />\n      <main className=\"flex-1 overflow-hidden\">\n        {children}\n      </main>\n    </div>\n  );\n}","size_bytes":528},"client/src/components/Sidebar.tsx":{"content":"import { \n  Home, Users, Building2, UserCheck, Ticket, DollarSign, \n  FolderOpen, CheckSquare, Mail, BarChart3, Settings, \n  MessageSquare, Search, Plus\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\n\ninterface SidebarProps {\n  activeModule: string;\n  onModuleChange: (module: string) => void;\n}\n\nconst menuItems = [\n  { id: \"dashboard\", label: \"Dashboard\", icon: Home },\n  { id: \"leads\", label: \"Leads\", icon: UserCheck },\n  { id: \"tickets\", label: \"Tickets\", icon: Ticket },\n  { id: \"deals\", label: \"Deals\", icon: DollarSign },\n  { id: \"projects\", label: \"Projects\", icon: FolderOpen },\n  { id: \"tasks\", label: \"Tasks\", icon: CheckSquare },\n  { id: \"emails\", label: \"Emails\", icon: Mail },\n  { id: \"users\", label: \"Users\", icon: Users },\n  { id: \"companies\", label: \"Companies\", icon: Building2 },\n  { id: \"reports\", label: \"Reports\", icon: BarChart3 },\n];\n\nexport default function Sidebar({ activeModule, onModuleChange }: SidebarProps) {\n  return (\n    <div className=\"w-64 bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700 flex flex-col\">\n      {/* Logo */}\n      <div className=\"p-6 border-b border-gray-200 dark:border-gray-700\">\n        <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">FlowCore</h1>\n        <p className=\"text-sm text-gray-500 dark:text-gray-400\">Business Management</p>\n      </div>\n      \n      {/* Quick Actions */}\n      <div className=\"p-4 border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"flex gap-2\">\n          <Button size=\"sm\" className=\"flex-1\">\n            <Plus className=\"w-4 h-4 mr-1\" />\n            Create\n          </Button>\n          <Button size=\"sm\" variant=\"outline\">\n            <Search className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n      \n      {/* Navigation */}\n      <nav className=\"flex-1 p-4 space-y-1\">\n        {menuItems.map((item) => {\n          const Icon = item.icon;\n          const isActive = activeModule === item.id;\n          \n          return (\n            <button\n              key={item.id}\n              onClick={() => onModuleChange(item.id)}\n              className={cn(\n                \"w-full flex items-center px-3 py-2 text-sm font-medium rounded-md transition-colors\",\n                isActive\n                  ? \"bg-blue-50 dark:bg-blue-900/20 text-blue-700 dark:text-blue-300\"\n                  : \"text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700\"\n              )}\n            >\n              <Icon className=\"w-5 h-5 mr-3\" />\n              {item.label}\n            </button>\n          );\n        })}\n      </nav>\n      \n      {/* AI Assistant Toggle */}\n      <div className=\"p-4 border-t border-gray-200 dark:border-gray-700\">\n        <Button \n          variant=\"outline\" \n          className=\"w-full\"\n          onClick={() => {\n            // Toggle AI assistant - this will be handled by parent component\n            const event = new CustomEvent('toggle-ai');\n            window.dispatchEvent(event);\n          }}\n        >\n          <MessageSquare className=\"w-4 h-4 mr-2\" />\n          AI Assistant\n        </Button>\n      </div>\n      \n      {/* Settings */}\n      <div className=\"p-4\">\n        <Button variant=\"ghost\" className=\"w-full justify-start\">\n          <Settings className=\"w-5 h-5 mr-3\" />\n          Settings\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":3420},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useStats.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport interface Stats {\n  totalLeads: number;\n  activeTickets: number;\n  totalRevenue: number;\n  activeProjects: number;\n  recentActivity: Array<{\n    type: string;\n    message: string;\n    timestamp: Date;\n  }>;\n}\n\nexport function useStats() {\n  return useQuery<Stats>({\n    queryKey: [\"/api/stats\"],\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n}\n","size_bytes":418},"client/src/lib/intents.ts":{"content":"import { toast } from \"@/hooks/use-toast\";\n\nexport interface AIResponse {\n  action: \"navigate\" | \"create\" | \"respond\" | \"open_modal\";\n  module?: string;\n  type?: string;\n  data?: any;\n  message?: string;\n}\n\nexport function processAIResponse(\n  response: AIResponse,\n  onModuleChange: (module: string) => void,\n  onOpenModal?: (type: string, module: string) => void\n) {\n  switch (response.action) {\n    case \"navigate\":\n      if (response.module) {\n        onModuleChange(response.module);\n        toast({\n          title: \"Navigation\",\n          description: `Navigated to ${response.module} module`,\n        });\n      }\n      break;\n    \n    case \"open_modal\":\n      if (response.module) {\n        onModuleChange(response.module);\n      }\n      if (response.type && onOpenModal) {\n        // Give the module time to load then open modal\n        setTimeout(() => {\n          onOpenModal(response.type!, response.module || \"\");\n        }, 100);\n      }\n      break;\n    \n    case \"create\":\n      // Handle creation actions (legacy support)\n      if (response.type === \"lead\") {\n        onModuleChange(\"crm\");\n        toast({\n          title: \"Create Lead\",\n          description: \"Opening lead creation form...\",\n        });\n      } else if (response.type === \"ticket\") {\n        onModuleChange(\"tickets\");\n        toast({\n          title: \"Create Ticket\",\n          description: \"Opening ticket creation form...\",\n        });\n      }\n      break;\n    \n    case \"respond\":\n      // Just show the message - already handled by the chat component\n      break;\n  }\n}\n\nexport function parseUserIntent(message: string): string {\n  const lowerMessage = message.toLowerCase();\n  \n  // Navigation intents\n  if (lowerMessage.includes(\"dashboard\") || lowerMessage.includes(\"home\")) {\n    return \"navigate:dashboard\";\n  }\n  if (lowerMessage.includes(\"crm\") || lowerMessage.includes(\"customer\") || lowerMessage.includes(\"lead\")) {\n    return \"navigate:crm\";\n  }\n  if (lowerMessage.includes(\"ticket\") || lowerMessage.includes(\"support\")) {\n    return \"navigate:tickets\";\n  }\n  if (lowerMessage.includes(\"sales\") || lowerMessage.includes(\"revenue\") || lowerMessage.includes(\"deal\")) {\n    return \"navigate:sales\";\n  }\n  if (lowerMessage.includes(\"project\") || lowerMessage.includes(\"task\")) {\n    return \"navigate:projects\";\n  }\n  if (lowerMessage.includes(\"email\") || lowerMessage.includes(\"mail\")) {\n    return \"navigate:email\";\n  }\n  \n  // Creation intents\n  if (lowerMessage.includes(\"create\") || lowerMessage.includes(\"add\") || lowerMessage.includes(\"new\")) {\n    if (lowerMessage.includes(\"lead\")) {\n      return \"create:lead\";\n    }\n    if (lowerMessage.includes(\"ticket\")) {\n      return \"create:ticket\";\n    }\n    if (lowerMessage.includes(\"deal\")) {\n      return \"create:deal\";\n    }\n    if (lowerMessage.includes(\"project\")) {\n      return \"create:project\";\n    }\n  }\n  \n  return \"general\";\n}\n","size_bytes":2888},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/companies.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Plus, Search, Edit, Trash2, Building2, Mail, Phone, MapPin, Calendar } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Company {\n  id: number;\n  name: string;\n  industry: string | null;\n  website: string | null;\n  phone: string | null;\n  email: string | null;\n  address: string | null;\n  notes: string | null;\n  createdAt: Date | null;\n}\n\nexport default function CompaniesPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\n  const [editingCompany, setEditingCompany] = useState<Company | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: companies = [], isLoading } = useQuery({\n    queryKey: [\"/api/companies\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch(\"/api/companies\", {\n        method: \"POST\",\n        body: JSON.stringify(data),\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n      if (!response.ok) throw new Error('Failed to create company');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/companies\"] });\n      setIsCreateOpen(false);\n      toast({ title: \"Success\", description: \"Company created successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to create company\", variant: \"destructive\" });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: any }) => {\n      const response = await fetch(`/api/companies/${id}`, {\n        method: \"PUT\",\n        body: JSON.stringify(data),\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n      if (!response.ok) throw new Error('Failed to update company');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/companies\"] });\n      setEditingCompany(null);\n      toast({ title: \"Success\", description: \"Company updated successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to update company\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await fetch(`/api/companies/${id}`, { method: \"DELETE\" });\n      if (!response.ok) throw new Error('Failed to delete company');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/companies\"] });\n      toast({ title: \"Success\", description: \"Company deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to delete company\", variant: \"destructive\" });\n    },\n  });\n\n  const filteredCompanies = (companies as Company[]).filter((company: Company) =>\n    company.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    (company.industry && company.industry.toLowerCase().includes(searchQuery.toLowerCase())) ||\n    (company.notes && company.notes.toLowerCase().includes(searchQuery.toLowerCase()))\n  );\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    const data = {\n      name: formData.get(\"name\") as string,\n      industry: formData.get(\"industry\") as string || null,\n      website: formData.get(\"website\") as string || null,\n      phone: formData.get(\"phone\") as string || null,\n      email: formData.get(\"email\") as string || null,\n      address: formData.get(\"address\") as string || null,\n      notes: formData.get(\"notes\") as string || null,\n    };\n\n    if (editingCompany) {\n      updateMutation.mutate({ id: editingCompany.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Companies</h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">Manage business accounts and organizations</p>\n        </div>\n        <Dialog open={isCreateOpen || !!editingCompany} onOpenChange={(open) => {\n          setIsCreateOpen(open);\n          if (!open) setEditingCompany(null);\n        }}>\n          <DialogTrigger asChild>\n            <Button onClick={() => setIsCreateOpen(true)}>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Company\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>{editingCompany ? \"Edit Company\" : \"Create New Company\"}</DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"name\">Company Name *</Label>\n                <Input id=\"name\" name=\"name\" defaultValue={editingCompany?.name || \"\"} required />\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"industry\">Industry</Label>\n                  <Input id=\"industry\" name=\"industry\" defaultValue={editingCompany?.industry || \"\"} />\n                </div>\n                <div>\n                  <Label htmlFor=\"website\">Website</Label>\n                  <Input id=\"website\" name=\"website\" type=\"url\" defaultValue={editingCompany?.website || \"\"} placeholder=\"https://example.com\" />\n                </div>\n                <div>\n                  <Label htmlFor=\"phone\">Phone</Label>\n                  <Input id=\"phone\" name=\"phone\" type=\"tel\" defaultValue={editingCompany?.phone || \"\"} />\n                </div>\n                <div>\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input id=\"email\" name=\"email\" type=\"email\" defaultValue={editingCompany?.email || \"\"} />\n                </div>\n              </div>\n              <div>\n                <Label htmlFor=\"address\">Address</Label>\n                <Textarea id=\"address\" name=\"address\" defaultValue={editingCompany?.address || \"\"} rows={2} />\n              </div>\n              <div>\n                <Label htmlFor=\"notes\">Notes</Label>\n                <Textarea id=\"notes\" name=\"notes\" defaultValue={editingCompany?.notes || \"\"} rows={3} />\n              </div>\n              <div className=\"flex justify-end space-x-2\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => {\n                  setIsCreateOpen(false);\n                  setEditingCompany(null);\n                }}>\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={createMutation.isPending || updateMutation.isPending}>\n                  {editingCompany ? \"Update\" : \"Create\"} Company\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>All Companies ({filteredCompanies.length})</CardTitle>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                <Input\n                  placeholder=\"Search companies...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10 w-64\"\n                />\n              </div>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"flex justify-center p-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Company</TableHead>\n                  <TableHead>Industry</TableHead>\n                  <TableHead>Contact Info</TableHead>\n                  <TableHead>Website</TableHead>\n                  <TableHead>Created</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredCompanies.map((company: Company) => (\n                  <TableRow key={company.id}>\n                    <TableCell>\n                      <div className=\"space-y-1\">\n                        <div className=\"flex items-center\">\n                          <Building2 className=\"w-5 h-5 mr-2 text-gray-400\" />\n                          <div className=\"font-medium\">{company.name}</div>\n                        </div>\n                        {company.address && (\n                          <div className=\"flex items-center text-sm text-gray-500\">\n                            <MapPin className=\"w-3 h-3 mr-1\" />\n                            {company.address}\n                          </div>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      {company.industry || <span className=\"text-gray-400\">Not specified</span>}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"space-y-1\">\n                        {company.email && (\n                          <div className=\"flex items-center text-sm\">\n                            <Mail className=\"w-3 h-3 mr-1 text-gray-400\" />\n                            {company.email}\n                          </div>\n                        )}\n                        {company.phone && (\n                          <div className=\"flex items-center text-sm\">\n                            <Phone className=\"w-3 h-3 mr-1 text-gray-400\" />\n                            {company.phone}\n                          </div>\n                        )}\n                        {!company.email && !company.phone && (\n                          <span className=\"text-gray-400 text-sm\">No contact info</span>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      {company.website ? (\n                        <a \n                          href={company.website} \n                          target=\"_blank\" \n                          rel=\"noopener noreferrer\"\n                          className=\"text-blue-600 hover:underline\"\n                        >\n                          Visit\n                        </a>\n                      ) : (\n                        <span className=\"text-gray-400\">No website</span>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      {company.createdAt ? (\n                        <div className=\"flex items-center\">\n                          <Calendar className=\"w-4 h-4 mr-2 text-gray-400\" />\n                          {new Date(company.createdAt).toLocaleDateString()}\n                        </div>\n                      ) : (\n                        <span className=\"text-gray-400\">Unknown</span>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => setEditingCompany(company)}\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => deleteMutation.mutate(company.id)}\n                          disabled={deleteMutation.isPending}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n                {filteredCompanies.length === 0 && (\n                  <TableRow>\n                    <TableCell colSpan={6} className=\"text-center py-8 text-gray-500\">\n                      No companies found. Create your first company to get started.\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":13208},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Users, Ticket, DollarSign, FolderOpen } from \"lucide-react\";\nimport { Line, Bar } from \"react-chartjs-2\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nexport default function Dashboard() {\n  const { data: stats, isLoading } = useQuery({\n    queryKey: [\"/api/stats\"],\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  return <DashboardContent stats={stats} isLoading={isLoading} />;\n}\n\nfunction DashboardContent({ stats, isLoading }: { stats: any; isLoading: boolean }) {\n  // Generate chart data from actual deals/revenue data\n  const salesData = {\n    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],\n    datasets: [\n      {\n        label: 'Revenue',\n        data: stats?.monthlyRevenue || [0, 0, 0, 0, 0, 0],\n        borderColor: 'hsl(207, 90%, 54%)',\n        backgroundColor: 'hsla(207, 90%, 54%, 0.1)',\n        tension: 0.4,\n      },\n    ],\n  };\n\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        display: false,\n      },\n    },\n    scales: {\n      y: {\n        beginAtZero: true,\n      },\n    },\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {[...Array(4)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"h-16 bg-slate-200 rounded\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-slate-600\">Total Leads</p>\n                <p className=\"text-2xl font-bold text-slate-800\">\n                  {stats?.totalLeads || 0}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                <Users className=\"text-blue-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-slate-600\">Active Tickets</p>\n                <p className=\"text-2xl font-bold text-slate-800\">\n                  {stats?.activeTickets || 0}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center\">\n                <Ticket className=\"text-red-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-slate-600\">Revenue</p>\n                <p className=\"text-2xl font-bold text-slate-800\">\n                  ${stats?.totalRevenue?.toLocaleString() || 0}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                <DollarSign className=\"text-green-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-slate-600\">Active Projects</p>\n                <p className=\"text-2xl font-bold text-slate-800\">\n                  {stats?.activeProjects || 0}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n                <FolderOpen className=\"text-purple-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-slate-800 mb-4\">Sales Overview</h3>\n            <div className=\"h-80\">\n              <Line data={salesData} options={chartOptions} />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-slate-800 mb-4\">Recent Activity</h3>\n            <div className=\"space-y-4\">\n              {stats?.recentActivity?.length > 0 ? (\n                stats.recentActivity.map((activity: any, index: number) => (\n                  <div key={index} className=\"flex items-center space-x-3\">\n                    <div className={`w-2 h-2 rounded-full ${\n                      activity.type === 'lead' ? 'bg-green-500' : 'bg-blue-500'\n                    }`}></div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm text-slate-800\">{activity.message}</p>\n                      <p className=\"text-xs text-slate-500\">\n                        {new Date(activity.timestamp).toLocaleString()}\n                      </p>\n                    </div>\n                  </div>\n                ))\n              ) : (\n                <div className=\"text-center py-8 text-slate-500\">\n                  <p>No recent activity</p>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5998},"client/src/pages/deals.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Plus, Search, Edit, Trash2, DollarSign, Calendar, Building2, User } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Deal {\n  id: number;\n  title: string;\n  value: string;\n  stage: string | null;\n  probability: number | null;\n  leadId: number | null;\n  companyId: number | null;\n  assignedTo: number | null;\n  expectedCloseDate: Date | null;\n  actualCloseDate: Date | null;\n  notes: string | null;\n  createdAt: Date | null;\n}\n\ninterface Lead {\n  id: number;\n  name: string;\n}\n\ninterface Company {\n  id: number;\n  name: string;\n}\n\ninterface User {\n  id: number;\n  fullName: string | null;\n}\n\nconst stageColors = {\n  prospecting: \"bg-blue-100 text-blue-800\",\n  qualification: \"bg-yellow-100 text-yellow-800\",\n  proposal: \"bg-orange-100 text-orange-800\",\n  negotiation: \"bg-purple-100 text-purple-800\",\n  closed_won: \"bg-green-100 text-green-800\",\n  closed_lost: \"bg-red-100 text-red-800\",\n};\n\nexport default function DealsPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\n  const [editingDeal, setEditingDeal] = useState<Deal | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: deals = [], isLoading } = useQuery({\n    queryKey: [\"/api/deals\"],\n  });\n\n  const { data: leads = [] } = useQuery<Lead[]>({\n    queryKey: [\"/api/leads\"],\n  });\n\n  const { data: companies = [] } = useQuery<Company[]>({\n    queryKey: [\"/api/companies\"],\n  });\n\n  const { data: users = [] } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch(\"/api/deals\", {\n        method: \"POST\",\n        body: JSON.stringify(data),\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n      if (!response.ok) throw new Error('Failed to create deal');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/deals\"] });\n      setIsCreateOpen(false);\n      toast({ title: \"Success\", description: \"Deal created successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to create deal\", variant: \"destructive\" });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: any }) => {\n      const response = await fetch(`/api/deals/${id}`, {\n        method: \"PUT\",\n        body: JSON.stringify(data),\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n      if (!response.ok) throw new Error('Failed to update deal');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/deals\"] });\n      setEditingDeal(null);\n      toast({ title: \"Success\", description: \"Deal updated successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to update deal\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await fetch(`/api/deals/${id}`, { method: \"DELETE\" });\n      if (!response.ok) throw new Error('Failed to delete deal');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/deals\"] });\n      toast({ title: \"Success\", description: \"Deal deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to delete deal\", variant: \"destructive\" });\n    },\n  });\n\n  const filteredDeals = (deals as Deal[]).filter((deal: Deal) =>\n    deal.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    (deal.notes && deal.notes.toLowerCase().includes(searchQuery.toLowerCase()))\n  );\n\n  const totalValue = filteredDeals.reduce((sum: number, deal: Deal) => sum + parseFloat(deal.value), 0);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    const data = {\n      title: formData.get(\"title\") as string,\n      value: formData.get(\"value\") as string,\n      stage: formData.get(\"stage\") as string || \"prospecting\",\n      probability: formData.get(\"probability\") ? parseInt(formData.get(\"probability\") as string) : 0,\n      leadId: formData.get(\"leadId\") && formData.get(\"leadId\") !== \"null\" ? parseInt(formData.get(\"leadId\") as string) : null,\n      companyId: formData.get(\"companyId\") && formData.get(\"companyId\") !== \"null\" ? parseInt(formData.get(\"companyId\") as string) : null,\n      assignedTo: formData.get(\"assignedTo\") && formData.get(\"assignedTo\") !== \"null\" ? parseInt(formData.get(\"assignedTo\") as string) : null,\n      expectedCloseDate: formData.get(\"expectedCloseDate\") ? new Date(formData.get(\"expectedCloseDate\") as string) : null,\n      actualCloseDate: formData.get(\"actualCloseDate\") ? new Date(formData.get(\"actualCloseDate\") as string) : null,\n      notes: formData.get(\"notes\") as string || null,\n    };\n\n    if (editingDeal) {\n      updateMutation.mutate({ id: editingDeal.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Sales Pipeline</h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">Track and manage your sales opportunities</p>\n        </div>\n        <Dialog open={isCreateOpen || !!editingDeal} onOpenChange={(open) => {\n          setIsCreateOpen(open);\n          if (!open) setEditingDeal(null);\n        }}>\n          <DialogTrigger asChild>\n            <Button onClick={() => setIsCreateOpen(true)}>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Deal\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>{editingDeal ? \"Edit Deal\" : \"Create New Deal\"}</DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"title\">Deal Title *</Label>\n                <Input id=\"title\" name=\"title\" defaultValue={editingDeal?.title || \"\"} required />\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"value\">Value *</Label>\n                  <Input \n                    id=\"value\" \n                    name=\"value\" \n                    type=\"number\" \n                    step=\"0.01\" \n                    defaultValue={editingDeal?.value || \"\"} \n                    required \n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"probability\">Probability (%)</Label>\n                  <Input \n                    id=\"probability\" \n                    name=\"probability\" \n                    type=\"number\" \n                    min=\"0\" \n                    max=\"100\" \n                    defaultValue={editingDeal?.probability || 50} \n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"stage\">Stage</Label>\n                  <Select name=\"stage\" defaultValue={editingDeal?.stage || \"prospecting\"}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"prospecting\">Prospecting</SelectItem>\n                      <SelectItem value=\"qualification\">Qualification</SelectItem>\n                      <SelectItem value=\"proposal\">Proposal</SelectItem>\n                      <SelectItem value=\"negotiation\">Negotiation</SelectItem>\n                      <SelectItem value=\"closed_won\">Closed Won</SelectItem>\n                      <SelectItem value=\"closed_lost\">Closed Lost</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"assignedTo\">Assigned To</Label>\n                  <Select name=\"assignedTo\" defaultValue={editingDeal?.assignedTo?.toString() || \"\"}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select user\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"null\">Unassigned</SelectItem>\n                      {users.map((user) => (\n                        <SelectItem key={user.id} value={user.id.toString()}>\n                          {user.fullName || `User ${user.id}`}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"leadId\">Related Lead</Label>\n                  <Select name=\"leadId\" defaultValue={editingDeal?.leadId?.toString() || \"\"}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select lead\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"null\">No lead</SelectItem>\n                      {leads.map((lead) => (\n                        <SelectItem key={lead.id} value={lead.id.toString()}>\n                          {lead.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"companyId\">Company</Label>\n                  <Select name=\"companyId\" defaultValue={editingDeal?.companyId?.toString() || \"\"}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select company\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"null\">No company</SelectItem>\n                      {companies.map((company) => (\n                        <SelectItem key={company.id} value={company.id.toString()}>\n                          {company.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"expectedCloseDate\">Expected Close Date</Label>\n                  <Input \n                    id=\"expectedCloseDate\" \n                    name=\"expectedCloseDate\" \n                    type=\"date\" \n                    defaultValue={editingDeal?.expectedCloseDate ? new Date(editingDeal.expectedCloseDate).toISOString().split('T')[0] : \"\"} \n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"actualCloseDate\">Actual Close Date</Label>\n                  <Input \n                    id=\"actualCloseDate\" \n                    name=\"actualCloseDate\" \n                    type=\"date\" \n                    defaultValue={editingDeal?.actualCloseDate ? new Date(editingDeal.actualCloseDate).toISOString().split('T')[0] : \"\"} \n                  />\n                </div>\n              </div>\n              <div>\n                <Label htmlFor=\"notes\">Notes</Label>\n                <Textarea id=\"notes\" name=\"notes\" defaultValue={editingDeal?.notes || \"\"} rows={3} />\n              </div>\n              <div className=\"flex justify-end space-x-2\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => {\n                  setIsCreateOpen(false);\n                  setEditingDeal(null);\n                }}>\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={createMutation.isPending || updateMutation.isPending}>\n                  {editingDeal ? \"Update\" : \"Create\"} Deal\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Pipeline Value</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">${totalValue.toLocaleString()}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Deals</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{filteredDeals.length}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Won Deals</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">\n              {filteredDeals.filter((d: Deal) => d.stage === 'closed_won').length}\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Win Rate</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {filteredDeals.length > 0 \n                ? Math.round((filteredDeals.filter((d: Deal) => d.stage === 'closed_won').length / filteredDeals.length) * 100)\n                : 0}%\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>All Deals ({filteredDeals.length})</CardTitle>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                <Input\n                  placeholder=\"Search deals...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10 w-64\"\n                />\n              </div>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"flex justify-center p-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Deal</TableHead>\n                  <TableHead>Value</TableHead>\n                  <TableHead>Stage</TableHead>\n                  <TableHead>Probability</TableHead>\n                  <TableHead>Company</TableHead>\n                  <TableHead>Assigned To</TableHead>\n                  <TableHead>Expected Close</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredDeals.map((deal: Deal) => (\n                  <TableRow key={deal.id}>\n                    <TableCell>\n                      <div className=\"space-y-1\">\n                        <div className=\"font-medium\">{deal.title}</div>\n                        {deal.notes && (\n                          <div className=\"text-sm text-gray-500 line-clamp-1\">{deal.notes}</div>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center font-medium\">\n                        <DollarSign className=\"w-4 h-4 mr-1 text-green-600\" />\n                        {parseFloat(deal.value).toLocaleString()}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge className={stageColors[deal.stage as keyof typeof stageColors] || stageColors.prospecting}>\n                        {deal.stage || \"prospecting\"}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center\">\n                        <div className=\"w-12 bg-gray-200 rounded-full h-2 mr-2\">\n                          <div \n                            className=\"bg-blue-600 h-2 rounded-full\" \n                            style={{ width: `${deal.probability || 0}%` }}\n                          ></div>\n                        </div>\n                        {deal.probability || 0}%\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      {deal.companyId ? (\n                        <div className=\"flex items-center\">\n                          <Building2 className=\"w-4 h-4 mr-2 text-gray-400\" />\n                          {companies.find(c => c.id === deal.companyId)?.name || \"Unknown\"}\n                        </div>\n                      ) : (\n                        <span className=\"text-gray-400\">No company</span>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      {deal.assignedTo ? (\n                        <div className=\"flex items-center\">\n                          <User className=\"w-4 h-4 mr-2 text-gray-400\" />\n                          {users.find(u => u.id === deal.assignedTo)?.fullName || `User ${deal.assignedTo}`}\n                        </div>\n                      ) : (\n                        <span className=\"text-gray-400\">Unassigned</span>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      {deal.expectedCloseDate ? (\n                        <div className=\"flex items-center\">\n                          <Calendar className=\"w-4 h-4 mr-2 text-gray-400\" />\n                          {new Date(deal.expectedCloseDate).toLocaleDateString()}\n                        </div>\n                      ) : (\n                        <span className=\"text-gray-400\">No date set</span>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => setEditingDeal(deal)}\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => deleteMutation.mutate(deal.id)}\n                          disabled={deleteMutation.isPending}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n                {filteredDeals.length === 0 && (\n                  <TableRow>\n                    <TableCell colSpan={8} className=\"text-center py-8 text-gray-500\">\n                      No deals found. Create your first deal to get started.\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":20137},"client/src/pages/emails.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Plus, Search, Edit, Trash2, Mail, Calendar, User, Send } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Email {\n  id: number;\n  to: string;\n  cc: string | null;\n  bcc: string | null;\n  subject: string;\n  body: string;\n  type: string | null;\n  status: string | null;\n  leadId: number | null;\n  ticketId: number | null;\n  dealId: number | null;\n  sentBy: number | null;\n  sentAt: Date | null;\n}\n\ninterface Lead {\n  id: number;\n  name: string;\n  email: string;\n}\n\ninterface User {\n  id: number;\n  fullName: string | null;\n  email: string;\n}\n\nconst statusColors = {\n  draft: \"bg-gray-100 text-gray-800\",\n  sent: \"bg-green-100 text-green-800\",\n  failed: \"bg-red-100 text-red-800\",\n  pending: \"bg-yellow-100 text-yellow-800\",\n};\n\nconst typeColors = {\n  promotional: \"bg-purple-100 text-purple-800\",\n  transactional: \"bg-blue-100 text-blue-800\",\n  newsletter: \"bg-orange-100 text-orange-800\",\n  support: \"bg-green-100 text-green-800\",\n};\n\nexport default function EmailsPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\n  const [editingEmail, setEditingEmail] = useState<Email | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: emails = [], isLoading } = useQuery({\n    queryKey: [\"/api/emails\"],\n  });\n\n  const { data: leads = [] } = useQuery<Lead[]>({\n    queryKey: [\"/api/leads\"],\n  });\n\n  const { data: users = [] } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch(\"/api/emails\", {\n        method: \"POST\",\n        body: JSON.stringify(data),\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n      if (!response.ok) throw new Error('Failed to create email');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/emails\"] });\n      setIsCreateOpen(false);\n      toast({ title: \"Success\", description: \"Email created successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to create email\", variant: \"destructive\" });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: any }) => {\n      const response = await fetch(`/api/emails/${id}`, {\n        method: \"PUT\",\n        body: JSON.stringify(data),\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n      if (!response.ok) throw new Error('Failed to update email');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/emails\"] });\n      setEditingEmail(null);\n      toast({ title: \"Success\", description: \"Email updated successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to update email\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await fetch(`/api/emails/${id}`, { method: \"DELETE\" });\n      if (!response.ok) throw new Error('Failed to delete email');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/emails\"] });\n      toast({ title: \"Success\", description: \"Email deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to delete email\", variant: \"destructive\" });\n    },\n  });\n\n  const filteredEmails = (emails as Email[]).filter((email: Email) =>\n    email.subject.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    email.to.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    email.body.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    const data = {\n      to: formData.get(\"to\") as string,\n      cc: formData.get(\"cc\") as string || null,\n      bcc: formData.get(\"bcc\") as string || null,\n      subject: formData.get(\"subject\") as string,\n      body: formData.get(\"body\") as string,\n      type: formData.get(\"type\") as string || \"transactional\",\n      status: formData.get(\"status\") as string || \"draft\",\n      leadId: formData.get(\"leadId\") && formData.get(\"leadId\") !== \"null\" && formData.get(\"leadId\") !== \"\" ? parseInt(formData.get(\"leadId\") as string) : null,\n      sentBy: formData.get(\"sentBy\") && formData.get(\"sentBy\") !== \"null\" && formData.get(\"sentBy\") !== \"\" ? parseInt(formData.get(\"sentBy\") as string) : null,\n    };\n\n    if (editingEmail) {\n      updateMutation.mutate({ id: editingEmail.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Email Communications</h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">Manage email correspondence and campaigns</p>\n        </div>\n        <Dialog open={isCreateOpen || !!editingEmail} onOpenChange={(open) => {\n          setIsCreateOpen(open);\n          if (!open) setEditingEmail(null);\n        }}>\n          <DialogTrigger asChild>\n            <Button onClick={() => setIsCreateOpen(true)}>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Compose Email\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>{editingEmail ? \"Edit Email\" : \"Compose New Email\"}</DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"col-span-2\">\n                  <Label htmlFor=\"to\">To *</Label>\n                  <Input id=\"to\" name=\"to\" type=\"email\" defaultValue={editingEmail?.to || \"\"} required />\n                </div>\n                <div>\n                  <Label htmlFor=\"cc\">CC</Label>\n                  <Input id=\"cc\" name=\"cc\" type=\"email\" defaultValue={editingEmail?.cc || \"\"} />\n                </div>\n                <div>\n                  <Label htmlFor=\"bcc\">BCC</Label>\n                  <Input id=\"bcc\" name=\"bcc\" type=\"email\" defaultValue={editingEmail?.bcc || \"\"} />\n                </div>\n              </div>\n              <div>\n                <Label htmlFor=\"subject\">Subject *</Label>\n                <Input id=\"subject\" name=\"subject\" defaultValue={editingEmail?.subject || \"\"} required />\n              </div>\n              <div>\n                <Label htmlFor=\"body\">Message *</Label>\n                <Textarea id=\"body\" name=\"body\" defaultValue={editingEmail?.body || \"\"} rows={8} required />\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"type\">Type</Label>\n                  <Select name=\"type\" defaultValue={editingEmail?.type || \"transactional\"}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"transactional\">Transactional</SelectItem>\n                      <SelectItem value=\"promotional\">Promotional</SelectItem>\n                      <SelectItem value=\"newsletter\">Newsletter</SelectItem>\n                      <SelectItem value=\"support\">Support</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"status\">Status</Label>\n                  <Select name=\"status\" defaultValue={editingEmail?.status || \"draft\"}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"draft\">Draft</SelectItem>\n                      <SelectItem value=\"pending\">Pending</SelectItem>\n                      <SelectItem value=\"sent\">Sent</SelectItem>\n                      <SelectItem value=\"failed\">Failed</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"leadId\">Related Lead</Label>\n                  <Select name=\"leadId\" defaultValue={editingEmail?.leadId?.toString() || \"\"}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select lead\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"null\">No lead</SelectItem>\n                      {leads.map((lead) => (\n                        <SelectItem key={lead.id} value={lead.id.toString()}>\n                          {lead.name} ({lead.email})\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"sentBy\">Sent By</Label>\n                  <Select name=\"sentBy\" defaultValue={editingEmail?.sentBy?.toString() || \"\"}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select user\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"null\">Unknown</SelectItem>\n                      {users.map((user) => (\n                        <SelectItem key={user.id} value={user.id.toString()}>\n                          {user.fullName || `User ${user.id}`} ({user.email})\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              <div className=\"flex justify-end space-x-2\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => {\n                  setIsCreateOpen(false);\n                  setEditingEmail(null);\n                }}>\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={createMutation.isPending || updateMutation.isPending}>\n                  <Send className=\"w-4 h-4 mr-2\" />\n                  {editingEmail ? \"Update\" : \"Send\"} Email\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>All Emails ({filteredEmails.length})</CardTitle>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                <Input\n                  placeholder=\"Search emails...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10 w-64\"\n                />\n              </div>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"flex justify-center p-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Email</TableHead>\n                  <TableHead>Recipient</TableHead>\n                  <TableHead>Type</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Sent By</TableHead>\n                  <TableHead>Date</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredEmails.map((email: Email) => (\n                  <TableRow key={email.id}>\n                    <TableCell>\n                      <div className=\"space-y-1\">\n                        <div className=\"font-medium flex items-center\">\n                          <Mail className=\"w-4 h-4 mr-2 text-gray-400\" />\n                          {email.subject}\n                        </div>\n                        <div className=\"text-sm text-gray-500 line-clamp-2\">{email.body}</div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"space-y-1\">\n                        <div className=\"font-medium\">{email.to}</div>\n                        {email.cc && (\n                          <div className=\"text-sm text-gray-500\">CC: {email.cc}</div>\n                        )}\n                        {email.bcc && (\n                          <div className=\"text-sm text-gray-500\">BCC: {email.bcc}</div>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant=\"outline\" className={typeColors[email.type as keyof typeof typeColors] || typeColors.transactional}>\n                        {email.type || \"transactional\"}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <Badge className={statusColors[email.status as keyof typeof statusColors] || statusColors.draft}>\n                        {email.status || \"draft\"}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      {email.sentBy ? (\n                        <div className=\"flex items-center\">\n                          <User className=\"w-4 h-4 mr-2 text-gray-400\" />\n                          {users.find(u => u.id === email.sentBy)?.fullName || `User ${email.sentBy}`}\n                        </div>\n                      ) : (\n                        <span className=\"text-gray-400\">Unknown</span>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      {email.sentAt ? (\n                        <div className=\"flex items-center\">\n                          <Calendar className=\"w-4 h-4 mr-2 text-gray-400\" />\n                          {new Date(email.sentAt).toLocaleDateString()}\n                        </div>\n                      ) : (\n                        <span className=\"text-gray-400\">Not sent</span>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => setEditingEmail(email)}\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => deleteMutation.mutate(email.id)}\n                          disabled={deleteMutation.isPending}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n                {filteredEmails.length === 0 && (\n                  <TableRow>\n                    <TableCell colSpan={7} className=\"text-center py-8 text-gray-500\">\n                      No emails found. Compose your first email to get started.\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":16568},"client/src/pages/leads.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Plus, Search, Edit, Trash2, Building2, Mail, Phone, User } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Lead {\n  id: number;\n  name: string;\n  email: string;\n  phone: string | null;\n  jobTitle: string | null;\n  companyId: number | null;\n  status: string | null;\n  priority: string | null;\n  source: string | null;\n  notes: string | null;\n  assignedTo: number | null;\n  createdAt: Date | null;\n}\n\ninterface Company {\n  id: number;\n  name: string;\n}\n\ninterface User {\n  id: number;\n  fullName: string | null;\n}\n\nconst statusColors = {\n  new: \"bg-blue-100 text-blue-800\",\n  contacted: \"bg-yellow-100 text-yellow-800\",\n  qualified: \"bg-green-100 text-green-800\",\n  converted: \"bg-purple-100 text-purple-800\",\n  lost: \"bg-red-100 text-red-800\",\n};\n\nconst priorityColors = {\n  low: \"bg-gray-100 text-gray-800\",\n  medium: \"bg-orange-100 text-orange-800\",\n  high: \"bg-red-100 text-red-800\",\n};\n\nexport default function LeadsPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\n  const [editingLead, setEditingLead] = useState<Lead | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: leads = [], isLoading } = useQuery({\n    queryKey: [\"/api/leads\"],\n  });\n\n  const { data: companies = [] } = useQuery<Company[]>({\n    queryKey: [\"/api/companies\"],\n  });\n\n  const { data: users = [] } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch(\"/api/leads\", {\n        method: \"POST\",\n        body: JSON.stringify(data),\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n      if (!response.ok) throw new Error('Failed to create lead');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leads\"] });\n      setIsCreateOpen(false);\n      toast({ title: \"Success\", description: \"Lead created successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to create lead\", variant: \"destructive\" });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: any }) => {\n      const response = await fetch(`/api/leads/${id}`, {\n        method: \"PUT\",\n        body: JSON.stringify(data),\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n      if (!response.ok) throw new Error('Failed to update lead');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leads\"] });\n      setEditingLead(null);\n      toast({ title: \"Success\", description: \"Lead updated successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to update lead\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await fetch(`/api/leads/${id}`, { method: \"DELETE\" });\n      if (!response.ok) throw new Error('Failed to delete lead');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leads\"] });\n      toast({ title: \"Success\", description: \"Lead deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to delete lead\", variant: \"destructive\" });\n    },\n  });\n\n  const filteredLeads = (leads as Lead[]).filter((lead: Lead) =>\n    lead.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    lead.email.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    (lead.notes && lead.notes.toLowerCase().includes(searchQuery.toLowerCase()))\n  );\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    const data = {\n      name: formData.get(\"name\") as string,\n      email: formData.get(\"email\") as string,\n      phone: formData.get(\"phone\") as string || null,\n      jobTitle: formData.get(\"jobTitle\") as string || null,\n      companyId: formData.get(\"companyId\") && formData.get(\"companyId\") !== \"null\" ? parseInt(formData.get(\"companyId\") as string) : null,\n      status: formData.get(\"status\") as string || \"new\",\n      priority: formData.get(\"priority\") as string || \"medium\",\n      source: formData.get(\"source\") as string || null,\n      notes: formData.get(\"notes\") as string || null,\n      assignedTo: formData.get(\"assignedTo\") && formData.get(\"assignedTo\") !== \"null\" ? parseInt(formData.get(\"assignedTo\") as string) : null,\n    };\n\n    if (editingLead) {\n      updateMutation.mutate({ id: editingLead.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Leads</h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">Manage your sales prospects and customer relationships</p>\n        </div>\n        <Dialog open={isCreateOpen || !!editingLead} onOpenChange={(open) => {\n          setIsCreateOpen(open);\n          if (!open) setEditingLead(null);\n        }}>\n          <DialogTrigger asChild>\n            <Button onClick={() => setIsCreateOpen(true)}>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Lead\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>{editingLead ? \"Edit Lead\" : \"Create New Lead\"}</DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"name\">Name *</Label>\n                  <Input id=\"name\" name=\"name\" defaultValue={editingLead?.name || \"\"} required />\n                </div>\n                <div>\n                  <Label htmlFor=\"email\">Email *</Label>\n                  <Input id=\"email\" name=\"email\" type=\"email\" defaultValue={editingLead?.email || \"\"} required />\n                </div>\n                <div>\n                  <Label htmlFor=\"phone\">Phone</Label>\n                  <Input id=\"phone\" name=\"phone\" type=\"tel\" defaultValue={editingLead?.phone || \"\"} />\n                </div>\n                <div>\n                  <Label htmlFor=\"jobTitle\">Job Title</Label>\n                  <Input id=\"jobTitle\" name=\"jobTitle\" defaultValue={editingLead?.jobTitle || \"\"} />\n                </div>\n                <div>\n                  <Label htmlFor=\"companyId\">Company</Label>\n                  <Select name=\"companyId\" defaultValue={editingLead?.companyId?.toString() || \"\"}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select company\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"null\">No company</SelectItem>\n                      {companies.map((company) => (\n                        <SelectItem key={company.id} value={company.id.toString()}>\n                          {company.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"status\">Status</Label>\n                  <Select name=\"status\" defaultValue={editingLead?.status || \"new\"}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"new\">New</SelectItem>\n                      <SelectItem value=\"contacted\">Contacted</SelectItem>\n                      <SelectItem value=\"qualified\">Qualified</SelectItem>\n                      <SelectItem value=\"converted\">Converted</SelectItem>\n                      <SelectItem value=\"lost\">Lost</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"priority\">Priority</Label>\n                  <Select name=\"priority\" defaultValue={editingLead?.priority || \"medium\"}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"low\">Low</SelectItem>\n                      <SelectItem value=\"medium\">Medium</SelectItem>\n                      <SelectItem value=\"high\">High</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"source\">Source</Label>\n                  <Input id=\"source\" name=\"source\" defaultValue={editingLead?.source || \"\"} placeholder=\"Website, referral, etc.\" />\n                </div>\n                <div>\n                  <Label htmlFor=\"assignedTo\">Assigned To</Label>\n                  <Select name=\"assignedTo\" defaultValue={editingLead?.assignedTo?.toString() || \"\"}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select user\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"null\">Unassigned</SelectItem>\n                      {users.map((user) => (\n                        <SelectItem key={user.id} value={user.id.toString()}>\n                          {user.fullName || `User ${user.id}`}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              <div>\n                <Label htmlFor=\"notes\">Notes</Label>\n                <Textarea id=\"notes\" name=\"notes\" defaultValue={editingLead?.notes || \"\"} rows={3} />\n              </div>\n              <div className=\"flex justify-end space-x-2\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => {\n                  setIsCreateOpen(false);\n                  setEditingLead(null);\n                }}>\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={createMutation.isPending || updateMutation.isPending}>\n                  {editingLead ? \"Update\" : \"Create\"} Lead\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>All Leads ({filteredLeads.length})</CardTitle>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                <Input\n                  placeholder=\"Search leads...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10 w-64\"\n                />\n              </div>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"flex justify-center p-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Lead</TableHead>\n                  <TableHead>Company</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Priority</TableHead>\n                  <TableHead>Source</TableHead>\n                  <TableHead>Assigned To</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredLeads.map((lead: Lead) => (\n                  <TableRow key={lead.id}>\n                    <TableCell>\n                      <div className=\"space-y-1\">\n                        <div className=\"font-medium\">{lead.name}</div>\n                        <div className=\"flex items-center text-sm text-gray-500\">\n                          <Mail className=\"w-3 h-3 mr-1\" />\n                          {lead.email}\n                        </div>\n                        {lead.phone && (\n                          <div className=\"flex items-center text-sm text-gray-500\">\n                            <Phone className=\"w-3 h-3 mr-1\" />\n                            {lead.phone}\n                          </div>\n                        )}\n                        {lead.jobTitle && (\n                          <div className=\"flex items-center text-sm text-gray-500\">\n                            <User className=\"w-3 h-3 mr-1\" />\n                            {lead.jobTitle}\n                          </div>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      {lead.companyId ? (\n                        <div className=\"flex items-center\">\n                          <Building2 className=\"w-4 h-4 mr-2 text-gray-400\" />\n                          {companies.find(c => c.id === lead.companyId)?.name || \"Unknown\"}\n                        </div>\n                      ) : (\n                        <span className=\"text-gray-400\">No company</span>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <Badge className={statusColors[lead.status as keyof typeof statusColors] || statusColors.new}>\n                        {lead.status || \"new\"}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant=\"outline\" className={priorityColors[lead.priority as keyof typeof priorityColors] || priorityColors.medium}>\n                        {lead.priority || \"medium\"}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>{lead.source || \"-\"}</TableCell>\n                    <TableCell>\n                      {lead.assignedTo ? users.find(u => u.id === lead.assignedTo)?.fullName || `User ${lead.assignedTo}` : \"Unassigned\"}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => setEditingLead(lead)}\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => deleteMutation.mutate(lead.id)}\n                          disabled={deleteMutation.isPending}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n                {filteredLeads.length === 0 && (\n                  <TableRow>\n                    <TableCell colSpan={7} className=\"text-center py-8 text-gray-500\">\n                      No leads found. Create your first lead to get started.\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":16457},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/projects.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Plus, Search, Edit, Trash2, Calendar, User, Building2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Project {\n  id: number;\n  name: string;\n  description: string | null;\n  status: string | null;\n  priority: string | null;\n  progress: number | null;\n  budget: string | null;\n  clientId: number | null;\n  managerId: number | null;\n  startDate: Date | null;\n  endDate: Date | null;\n  createdAt: Date | null;\n}\n\ninterface User {\n  id: number;\n  fullName: string | null;\n}\n\ninterface Company {\n  id: number;\n  name: string;\n}\n\nconst statusColors = {\n  planning: \"bg-blue-100 text-blue-800\",\n  active: \"bg-green-100 text-green-800\",\n  on_hold: \"bg-yellow-100 text-yellow-800\",\n  completed: \"bg-gray-100 text-gray-800\",\n  cancelled: \"bg-red-100 text-red-800\",\n};\n\nconst priorityColors = {\n  low: \"bg-gray-100 text-gray-800\",\n  medium: \"bg-orange-100 text-orange-800\",\n  high: \"bg-red-100 text-red-800\",\n};\n\nexport default function ProjectsPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\n  const [editingProject, setEditingProject] = useState<Project | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: projects = [], isLoading } = useQuery({\n    queryKey: [\"/api/projects\"],\n  });\n\n  const { data: users = [] } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n  });\n\n  const { data: companies = [] } = useQuery<Company[]>({\n    queryKey: [\"/api/companies\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch(\"/api/projects\", {\n        method: \"POST\",\n        body: JSON.stringify(data),\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n      if (!response.ok) throw new Error('Failed to create project');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      setIsCreateOpen(false);\n      toast({ title: \"Success\", description: \"Project created successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to create project\", variant: \"destructive\" });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: any }) => {\n      const response = await fetch(`/api/projects/${id}`, {\n        method: \"PUT\",\n        body: JSON.stringify(data),\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n      if (!response.ok) throw new Error('Failed to update project');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      setEditingProject(null);\n      toast({ title: \"Success\", description: \"Project updated successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to update project\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await fetch(`/api/projects/${id}`, { method: \"DELETE\" });\n      if (!response.ok) throw new Error('Failed to delete project');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      toast({ title: \"Success\", description: \"Project deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to delete project\", variant: \"destructive\" });\n    },\n  });\n\n  const filteredProjects = (projects as Project[]).filter((project: Project) =>\n    project.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    (project.description && project.description.toLowerCase().includes(searchQuery.toLowerCase()))\n  );\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    const data = {\n      name: formData.get(\"name\") as string,\n      description: formData.get(\"description\") as string || null,\n      status: formData.get(\"status\") as string || \"planning\",\n      priority: formData.get(\"priority\") as string || \"medium\",\n      progress: formData.get(\"progress\") ? parseInt(formData.get(\"progress\") as string) : 0,\n      budget: formData.get(\"budget\") as string || null,\n      clientId: formData.get(\"clientId\") && formData.get(\"clientId\") !== \"null\" && formData.get(\"clientId\") !== \"\" ? parseInt(formData.get(\"clientId\") as string) : null,\n      managerId: formData.get(\"managerId\") && formData.get(\"managerId\") !== \"null\" && formData.get(\"managerId\") !== \"\" ? parseInt(formData.get(\"managerId\") as string) : null,\n      startDate: formData.get(\"startDate\") ? new Date(formData.get(\"startDate\") as string) : null,\n      endDate: formData.get(\"endDate\") ? new Date(formData.get(\"endDate\") as string) : null,\n    };\n\n    if (editingProject) {\n      updateMutation.mutate({ id: editingProject.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Projects</h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">Manage your projects and track progress</p>\n        </div>\n        <Dialog open={isCreateOpen || !!editingProject} onOpenChange={(open) => {\n          setIsCreateOpen(open);\n          if (!open) setEditingProject(null);\n        }}>\n          <DialogTrigger asChild>\n            <Button onClick={() => setIsCreateOpen(true)}>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              New Project\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>{editingProject ? \"Edit Project\" : \"Create New Project\"}</DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"name\">Project Name *</Label>\n                <Input id=\"name\" name=\"name\" defaultValue={editingProject?.name || \"\"} required />\n              </div>\n              <div>\n                <Label htmlFor=\"description\">Description</Label>\n                <Textarea id=\"description\" name=\"description\" defaultValue={editingProject?.description || \"\"} rows={3} />\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"status\">Status</Label>\n                  <Select name=\"status\" defaultValue={editingProject?.status || \"planning\"}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"planning\">Planning</SelectItem>\n                      <SelectItem value=\"active\">Active</SelectItem>\n                      <SelectItem value=\"on_hold\">On Hold</SelectItem>\n                      <SelectItem value=\"completed\">Completed</SelectItem>\n                      <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"priority\">Priority</Label>\n                  <Select name=\"priority\" defaultValue={editingProject?.priority || \"medium\"}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"low\">Low</SelectItem>\n                      <SelectItem value=\"medium\">Medium</SelectItem>\n                      <SelectItem value=\"high\">High</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"progress\">Progress (%)</Label>\n                  <Input \n                    id=\"progress\" \n                    name=\"progress\" \n                    type=\"number\" \n                    min=\"0\" \n                    max=\"100\" \n                    defaultValue={editingProject?.progress || 0} \n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"budget\">Budget</Label>\n                  <Input id=\"budget\" name=\"budget\" defaultValue={editingProject?.budget || \"\"} placeholder=\"e.g., $50,000\" />\n                </div>\n                <div>\n                  <Label htmlFor=\"managerId\">Project Manager</Label>\n                  <Select name=\"managerId\" defaultValue={editingProject?.managerId?.toString() || \"\"}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select manager\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"null\">No manager</SelectItem>\n                      {users.map((user) => (\n                        <SelectItem key={user.id} value={user.id.toString()}>\n                          {user.fullName || `User ${user.id}`}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"clientId\">Client</Label>\n                  <Select name=\"clientId\" defaultValue={editingProject?.clientId?.toString() || \"\"}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select client\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"null\">No client</SelectItem>\n                      {companies.map((company) => (\n                        <SelectItem key={company.id} value={company.id.toString()}>\n                          {company.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"startDate\">Start Date</Label>\n                  <Input \n                    id=\"startDate\" \n                    name=\"startDate\" \n                    type=\"date\" \n                    defaultValue={editingProject?.startDate ? new Date(editingProject.startDate).toISOString().split('T')[0] : \"\"} \n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"endDate\">End Date</Label>\n                  <Input \n                    id=\"endDate\" \n                    name=\"endDate\" \n                    type=\"date\" \n                    defaultValue={editingProject?.endDate ? new Date(editingProject.endDate).toISOString().split('T')[0] : \"\"} \n                  />\n                </div>\n              </div>\n              <div className=\"flex justify-end space-x-2\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => {\n                  setIsCreateOpen(false);\n                  setEditingProject(null);\n                }}>\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={createMutation.isPending || updateMutation.isPending}>\n                  {editingProject ? \"Update\" : \"Create\"} Project\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>All Projects ({filteredProjects.length})</CardTitle>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                <Input\n                  placeholder=\"Search projects...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10 w-64\"\n                />\n              </div>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"flex justify-center p-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Project</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Priority</TableHead>\n                  <TableHead>Progress</TableHead>\n                  <TableHead>Manager</TableHead>\n                  <TableHead>Client</TableHead>\n                  <TableHead>Dates</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredProjects.map((project: Project) => (\n                  <TableRow key={project.id}>\n                    <TableCell>\n                      <div className=\"space-y-1\">\n                        <div className=\"font-medium\">{project.name}</div>\n                        {project.description && (\n                          <div className=\"text-sm text-gray-500 line-clamp-2\">{project.description}</div>\n                        )}\n                        {project.budget && (\n                          <div className=\"text-sm font-medium text-green-600\">{project.budget}</div>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge className={statusColors[project.status as keyof typeof statusColors] || statusColors.planning}>\n                        {project.status || \"planning\"}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant=\"outline\" className={priorityColors[project.priority as keyof typeof priorityColors] || priorityColors.medium}>\n                        {project.priority || \"medium\"}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"space-y-1\">\n                        <Progress value={project.progress || 0} className=\"w-20\" />\n                        <div className=\"text-xs text-gray-500\">{project.progress || 0}%</div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      {project.managerId ? (\n                        <div className=\"flex items-center\">\n                          <User className=\"w-4 h-4 mr-2 text-gray-400\" />\n                          {users.find(u => u.id === project.managerId)?.fullName || `User ${project.managerId}`}\n                        </div>\n                      ) : (\n                        <span className=\"text-gray-400\">No manager</span>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      {project.clientId ? (\n                        <div className=\"flex items-center\">\n                          <Building2 className=\"w-4 h-4 mr-2 text-gray-400\" />\n                          {companies.find(c => c.id === project.clientId)?.name || \"Unknown\"}\n                        </div>\n                      ) : (\n                        <span className=\"text-gray-400\">No client</span>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"space-y-1 text-sm\">\n                        {project.startDate && (\n                          <div className=\"flex items-center text-gray-600\">\n                            <Calendar className=\"w-3 h-3 mr-1\" />\n                            Start: {new Date(project.startDate).toLocaleDateString()}\n                          </div>\n                        )}\n                        {project.endDate && (\n                          <div className=\"flex items-center text-gray-600\">\n                            <Calendar className=\"w-3 h-3 mr-1\" />\n                            End: {new Date(project.endDate).toLocaleDateString()}\n                          </div>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => setEditingProject(project)}\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => deleteMutation.mutate(project.id)}\n                          disabled={deleteMutation.isPending}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n                {filteredProjects.length === 0 && (\n                  <TableRow>\n                    <TableCell colSpan={8} className=\"text-center py-8 text-gray-500\">\n                      No projects found. Create your first project to get started.\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":18442},"client/src/pages/reports.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  BarChart3, TrendingUp, Users, Building2, Ticket, \n  DollarSign, FolderOpen, CheckSquare, Mail, Calendar\n} from \"lucide-react\";\n\ninterface Stats {\n  totalLeads: number;\n  activeTickets: number;\n  totalRevenue: number;\n  activeProjects: number;\n  totalUsers: number;\n  recentActivity: Array<{\n    type: string;\n    message: string;\n    timestamp: Date;\n  }>;\n}\n\nexport default function ReportsPage() {\n  const { data: stats, isLoading } = useQuery<Stats>({\n    queryKey: [\"/api/stats\"],\n  });\n\n  const { data: leads = [] } = useQuery({\n    queryKey: [\"/api/leads\"],\n  });\n\n  const { data: tickets = [] } = useQuery({\n    queryKey: [\"/api/tickets\"],\n  });\n\n  const { data: deals = [] } = useQuery({\n    queryKey: [\"/api/deals\"],\n  });\n\n  const { data: projects = [] } = useQuery({\n    queryKey: [\"/api/projects\"],\n  });\n\n  const { data: users = [] } = useQuery({\n    queryKey: [\"/api/users\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6 space-y-6\">\n        <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Reports & Analytics</h1>\n        <div className=\"flex justify-center p-8\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  // Calculate lead conversion rates\n  const leadStats = {\n    total: leads.length,\n    new: leads.filter((l: any) => l.status === 'new').length,\n    contacted: leads.filter((l: any) => l.status === 'contacted').length,\n    qualified: leads.filter((l: any) => l.status === 'qualified').length,\n    converted: leads.filter((l: any) => l.status === 'converted').length,\n    lost: leads.filter((l: any) => l.status === 'lost').length,\n  };\n\n  // Calculate ticket resolution rates\n  const ticketStats = {\n    total: tickets.length,\n    open: tickets.filter((t: any) => t.status === 'open').length,\n    inProgress: tickets.filter((t: any) => t.status === 'in_progress').length,\n    resolved: tickets.filter((t: any) => t.status === 'resolved').length,\n    closed: tickets.filter((t: any) => t.status === 'closed').length,\n  };\n\n  // Calculate deal pipeline\n  const dealStats = {\n    total: deals.length,\n    totalValue: deals.reduce((sum: number, deal: any) => sum + parseFloat(deal.value), 0),\n    won: deals.filter((d: any) => d.stage === 'closed_won').length,\n    lost: deals.filter((d: any) => d.stage === 'closed_lost').length,\n    active: deals.filter((d: any) => !['closed_won', 'closed_lost'].includes(d.stage)).length,\n  };\n\n  // Calculate project progress\n  const projectStats = {\n    total: projects.length,\n    active: projects.filter((p: any) => p.status === 'active').length,\n    completed: projects.filter((p: any) => p.status === 'completed').length,\n    planning: projects.filter((p: any) => p.status === 'planning').length,\n    avgProgress: projects.length > 0 ? \n      Math.round(projects.reduce((sum: number, p: any) => sum + (p.progress || 0), 0) / projects.length) : 0,\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Reports & Analytics</h1>\n        <p className=\"text-gray-600 dark:text-gray-400\">Business insights and performance metrics</p>\n      </div>\n\n      {/* Overview Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Leads</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats?.totalLeads || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {leadStats.converted > 0 && leadStats.total > 0 && \n                `${Math.round((leadStats.converted / leadStats.total) * 100)}% conversion rate`\n              }\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Tickets</CardTitle>\n            <Ticket className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats?.activeTickets || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {ticketStats.resolved > 0 && ticketStats.total > 0 && \n                `${Math.round((ticketStats.resolved / ticketStats.total) * 100)}% resolved`\n              }\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Revenue</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">${(stats?.totalRevenue || 0).toLocaleString()}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {dealStats.won} deals won\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Projects</CardTitle>\n            <FolderOpen className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats?.activeProjects || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {projectStats.avgProgress}% avg progress\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Team Members</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats?.totalUsers || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Active users\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Detailed Reports */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Lead Pipeline */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <TrendingUp className=\"w-5 h-5 mr-2\" />\n              Lead Pipeline\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between\">\n                <span>New Leads</span>\n                <Badge variant=\"outline\">{leadStats.new}</Badge>\n              </div>\n              <Progress value={leadStats.total > 0 ? (leadStats.new / leadStats.total) * 100 : 0} />\n            </div>\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between\">\n                <span>Contacted</span>\n                <Badge variant=\"outline\">{leadStats.contacted}</Badge>\n              </div>\n              <Progress value={leadStats.total > 0 ? (leadStats.contacted / leadStats.total) * 100 : 0} />\n            </div>\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between\">\n                <span>Qualified</span>\n                <Badge variant=\"outline\">{leadStats.qualified}</Badge>\n              </div>\n              <Progress value={leadStats.total > 0 ? (leadStats.qualified / leadStats.total) * 100 : 0} />\n            </div>\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between\">\n                <span>Converted</span>\n                <Badge className=\"bg-green-100 text-green-800\">{leadStats.converted}</Badge>\n              </div>\n              <Progress value={leadStats.total > 0 ? (leadStats.converted / leadStats.total) * 100 : 0} className=\"bg-green-200\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Ticket Status */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <CheckSquare className=\"w-5 h-5 mr-2\" />\n              Support Tickets\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between\">\n                <span>Open</span>\n                <Badge variant=\"outline\">{ticketStats.open}</Badge>\n              </div>\n              <Progress value={ticketStats.total > 0 ? (ticketStats.open / ticketStats.total) * 100 : 0} />\n            </div>\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between\">\n                <span>In Progress</span>\n                <Badge className=\"bg-blue-100 text-blue-800\">{ticketStats.inProgress}</Badge>\n              </div>\n              <Progress value={ticketStats.total > 0 ? (ticketStats.inProgress / ticketStats.total) * 100 : 0} />\n            </div>\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between\">\n                <span>Resolved</span>\n                <Badge className=\"bg-green-100 text-green-800\">{ticketStats.resolved}</Badge>\n              </div>\n              <Progress value={ticketStats.total > 0 ? (ticketStats.resolved / ticketStats.total) * 100 : 0} />\n            </div>\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between\">\n                <span>Closed</span>\n                <Badge variant=\"secondary\">{ticketStats.closed}</Badge>\n              </div>\n              <Progress value={ticketStats.total > 0 ? (ticketStats.closed / ticketStats.total) * 100 : 0} />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Sales Performance */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <BarChart3 className=\"w-5 h-5 mr-2\" />\n              Sales Performance\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-green-600\">{dealStats.won}</div>\n                <div className=\"text-sm text-gray-500\">Deals Won</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-red-600\">{dealStats.lost}</div>\n                <div className=\"text-sm text-gray-500\">Deals Lost</div>\n              </div>\n            </div>\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between\">\n                <span>Win Rate</span>\n                <Badge className=\"bg-green-100 text-green-800\">\n                  {dealStats.total > 0 ? Math.round((dealStats.won / dealStats.total) * 100) : 0}%\n                </Badge>\n              </div>\n              <Progress value={dealStats.total > 0 ? (dealStats.won / dealStats.total) * 100 : 0} />\n            </div>\n            <div className=\"text-center pt-2\">\n              <div className=\"text-lg font-semibold\">${dealStats.totalValue.toLocaleString()}</div>\n              <div className=\"text-sm text-gray-500\">Total Pipeline Value</div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Recent Activity */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Calendar className=\"w-5 h-5 mr-2\" />\n              Recent Activity\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {stats?.recentActivity?.slice(0, 8).map((activity, index) => (\n                <div key={index} className=\"flex items-start space-x-3\">\n                  <div className=\"flex-shrink-0\">\n                    {activity.type === 'lead' && <Users className=\"w-4 h-4 text-blue-500\" />}\n                    {activity.type === 'ticket' && <Ticket className=\"w-4 h-4 text-orange-500\" />}\n                    {activity.type === 'deal' && <DollarSign className=\"w-4 h-4 text-green-500\" />}\n                    {activity.type === 'project' && <FolderOpen className=\"w-4 h-4 text-purple-500\" />}\n                    {activity.type === 'email' && <Mail className=\"w-4 h-4 text-red-500\" />}\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"text-sm text-gray-900 dark:text-gray-100\">{activity.message}</p>\n                    <p className=\"text-xs text-gray-500\">\n                      {new Date(activity.timestamp).toLocaleDateString()}\n                    </p>\n                  </div>\n                </div>\n              )) || (\n                <p className=\"text-sm text-gray-500 text-center py-4\">No recent activity</p>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":13420},"client/src/pages/tasks.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Plus, Search, Edit, Trash2, Calendar, User, FolderOpen } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Task {\n  id: number;\n  title: string;\n  description: string | null;\n  status: string | null;\n  priority: string | null;\n  assignedTo: number | null;\n  projectId: number | null;\n  estimatedHours: string | null;\n  actualHours: string | null;\n  dueDate: Date | null;\n  startDate: Date | null;\n  completedAt: Date | null;\n  createdAt: Date | null;\n}\n\ninterface User {\n  id: number;\n  fullName: string | null;\n}\n\ninterface Project {\n  id: number;\n  name: string;\n}\n\nconst statusColors = {\n  todo: \"bg-gray-100 text-gray-800\",\n  in_progress: \"bg-blue-100 text-blue-800\",\n  review: \"bg-yellow-100 text-yellow-800\",\n  completed: \"bg-green-100 text-green-800\",\n  cancelled: \"bg-red-100 text-red-800\",\n};\n\nconst priorityColors = {\n  low: \"bg-gray-100 text-gray-800\",\n  medium: \"bg-orange-100 text-orange-800\",\n  high: \"bg-red-100 text-red-800\",\n};\n\nexport default function TasksPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\n  const [editingTask, setEditingTask] = useState<Task | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: tasks = [], isLoading } = useQuery({\n    queryKey: [\"/api/tasks\"],\n  });\n\n  const { data: users = [] } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n  });\n\n  const { data: projects = [] } = useQuery<Project[]>({\n    queryKey: [\"/api/projects\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch(\"/api/tasks\", {\n        method: \"POST\",\n        body: JSON.stringify(data),\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n      if (!response.ok) throw new Error('Failed to create task');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      setIsCreateOpen(false);\n      toast({ title: \"Success\", description: \"Task created successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to create task\", variant: \"destructive\" });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: any }) => {\n      const response = await fetch(`/api/tasks/${id}`, {\n        method: \"PUT\",\n        body: JSON.stringify(data),\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n      if (!response.ok) throw new Error('Failed to update task');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      setEditingTask(null);\n      toast({ title: \"Success\", description: \"Task updated successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to update task\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await fetch(`/api/tasks/${id}`, { method: \"DELETE\" });\n      if (!response.ok) throw new Error('Failed to delete task');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      toast({ title: \"Success\", description: \"Task deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to delete task\", variant: \"destructive\" });\n    },\n  });\n\n  const filteredTasks = (tasks as Task[]).filter((task: Task) =>\n    task.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    (task.description && task.description.toLowerCase().includes(searchQuery.toLowerCase()))\n  );\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    const data = {\n      title: formData.get(\"title\") as string,\n      description: formData.get(\"description\") as string || null,\n      status: formData.get(\"status\") as string || \"todo\",\n      priority: formData.get(\"priority\") as string || \"medium\",\n      assignedTo: formData.get(\"assignedTo\") && formData.get(\"assignedTo\") !== \"null\" && formData.get(\"assignedTo\") !== \"\" ? parseInt(formData.get(\"assignedTo\") as string) : null,\n      projectId: formData.get(\"projectId\") && formData.get(\"projectId\") !== \"null\" && formData.get(\"projectId\") !== \"\" ? parseInt(formData.get(\"projectId\") as string) : null,\n      estimatedHours: formData.get(\"estimatedHours\") as string || null,\n      actualHours: formData.get(\"actualHours\") as string || null,\n      dueDate: formData.get(\"dueDate\") ? new Date(formData.get(\"dueDate\") as string) : null,\n      startDate: formData.get(\"startDate\") ? new Date(formData.get(\"startDate\") as string) : null,\n    };\n\n    if (editingTask) {\n      updateMutation.mutate({ id: editingTask.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Tasks</h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">Manage individual tasks and assignments</p>\n        </div>\n        <Dialog open={isCreateOpen || !!editingTask} onOpenChange={(open) => {\n          setIsCreateOpen(open);\n          if (!open) setEditingTask(null);\n        }}>\n          <DialogTrigger asChild>\n            <Button onClick={() => setIsCreateOpen(true)}>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              New Task\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>{editingTask ? \"Edit Task\" : \"Create New Task\"}</DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"title\">Task Title *</Label>\n                <Input id=\"title\" name=\"title\" defaultValue={editingTask?.title || \"\"} required />\n              </div>\n              <div>\n                <Label htmlFor=\"description\">Description</Label>\n                <Textarea id=\"description\" name=\"description\" defaultValue={editingTask?.description || \"\"} rows={3} />\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"status\">Status</Label>\n                  <Select name=\"status\" defaultValue={editingTask?.status || \"todo\"}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"todo\">To Do</SelectItem>\n                      <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                      <SelectItem value=\"review\">Review</SelectItem>\n                      <SelectItem value=\"completed\">Completed</SelectItem>\n                      <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"priority\">Priority</Label>\n                  <Select name=\"priority\" defaultValue={editingTask?.priority || \"medium\"}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"low\">Low</SelectItem>\n                      <SelectItem value=\"medium\">Medium</SelectItem>\n                      <SelectItem value=\"high\">High</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"assignedTo\">Assigned To</Label>\n                  <Select name=\"assignedTo\" defaultValue={editingTask?.assignedTo?.toString() || \"\"}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select user\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"null\">Unassigned</SelectItem>\n                      {users.map((user) => (\n                        <SelectItem key={user.id} value={user.id.toString()}>\n                          {user.fullName || `User ${user.id}`}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"projectId\">Project</Label>\n                  <Select name=\"projectId\" defaultValue={editingTask?.projectId?.toString() || \"\"}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select project\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"null\">No project</SelectItem>\n                      {projects.map((project) => (\n                        <SelectItem key={project.id} value={project.id.toString()}>\n                          {project.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"estimatedHours\">Estimated Hours</Label>\n                  <Input \n                    id=\"estimatedHours\" \n                    name=\"estimatedHours\" \n                    type=\"number\" \n                    step=\"0.5\" \n                    defaultValue={editingTask?.estimatedHours || \"\"} \n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"actualHours\">Actual Hours</Label>\n                  <Input \n                    id=\"actualHours\" \n                    name=\"actualHours\" \n                    type=\"number\" \n                    step=\"0.5\" \n                    defaultValue={editingTask?.actualHours || \"\"} \n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"startDate\">Start Date</Label>\n                  <Input \n                    id=\"startDate\" \n                    name=\"startDate\" \n                    type=\"date\" \n                    defaultValue={editingTask?.startDate ? new Date(editingTask.startDate).toISOString().split('T')[0] : \"\"} \n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"dueDate\">Due Date</Label>\n                  <Input \n                    id=\"dueDate\" \n                    name=\"dueDate\" \n                    type=\"date\" \n                    defaultValue={editingTask?.dueDate ? new Date(editingTask.dueDate).toISOString().split('T')[0] : \"\"} \n                  />\n                </div>\n              </div>\n              <div className=\"flex justify-end space-x-2\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => {\n                  setIsCreateOpen(false);\n                  setEditingTask(null);\n                }}>\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={createMutation.isPending || updateMutation.isPending}>\n                  {editingTask ? \"Update\" : \"Create\"} Task\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>All Tasks ({filteredTasks.length})</CardTitle>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                <Input\n                  placeholder=\"Search tasks...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10 w-64\"\n                />\n              </div>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"flex justify-center p-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Task</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Priority</TableHead>\n                  <TableHead>Assigned To</TableHead>\n                  <TableHead>Project</TableHead>\n                  <TableHead>Hours</TableHead>\n                  <TableHead>Due Date</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredTasks.map((task: Task) => (\n                  <TableRow key={task.id}>\n                    <TableCell>\n                      <div className=\"space-y-1\">\n                        <div className=\"font-medium\">{task.title}</div>\n                        {task.description && (\n                          <div className=\"text-sm text-gray-500 line-clamp-2\">{task.description}</div>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge className={statusColors[task.status as keyof typeof statusColors] || statusColors.todo}>\n                        {task.status || \"todo\"}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant=\"outline\" className={priorityColors[task.priority as keyof typeof priorityColors] || priorityColors.medium}>\n                        {task.priority || \"medium\"}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      {task.assignedTo ? (\n                        <div className=\"flex items-center\">\n                          <User className=\"w-4 h-4 mr-2 text-gray-400\" />\n                          {users.find(u => u.id === task.assignedTo)?.fullName || `User ${task.assignedTo}`}\n                        </div>\n                      ) : (\n                        <span className=\"text-gray-400\">Unassigned</span>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      {task.projectId ? (\n                        <div className=\"flex items-center\">\n                          <FolderOpen className=\"w-4 h-4 mr-2 text-gray-400\" />\n                          {projects.find(p => p.id === task.projectId)?.name || \"Unknown\"}\n                        </div>\n                      ) : (\n                        <span className=\"text-gray-400\">No project</span>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"text-sm\">\n                        {task.estimatedHours && (\n                          <div>Est: {task.estimatedHours}h</div>\n                        )}\n                        {task.actualHours && (\n                          <div>Act: {task.actualHours}h</div>\n                        )}\n                        {!task.estimatedHours && !task.actualHours && (\n                          <span className=\"text-gray-400\">-</span>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      {task.dueDate ? (\n                        <div className=\"flex items-center\">\n                          <Calendar className=\"w-4 h-4 mr-2 text-gray-400\" />\n                          {new Date(task.dueDate).toLocaleDateString()}\n                        </div>\n                      ) : (\n                        <span className=\"text-gray-400\">No due date</span>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => setEditingTask(task)}\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => deleteMutation.mutate(task.id)}\n                          disabled={deleteMutation.isPending}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n                {filteredTasks.length === 0 && (\n                  <TableRow>\n                    <TableCell colSpan={8} className=\"text-center py-8 text-gray-500\">\n                      No tasks found. Create your first task to get started.\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":18083},"client/src/pages/tickets.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Plus, Search, Edit, Trash2, Calendar, User, AlertCircle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Ticket {\n  id: number;\n  title: string;\n  description: string;\n  status: string | null;\n  priority: string | null;\n  category: string | null;\n  assignedTo: number | null;\n  reportedBy: number | null;\n  leadId: number | null;\n  resolution: string | null;\n  dueDate: Date | null;\n  createdAt: Date | null;\n  updatedAt: Date | null;\n}\n\ninterface User {\n  id: number;\n  fullName: string | null;\n}\n\nconst statusColors = {\n  open: \"bg-blue-100 text-blue-800\",\n  in_progress: \"bg-yellow-100 text-yellow-800\",\n  resolved: \"bg-green-100 text-green-800\",\n  closed: \"bg-gray-100 text-gray-800\",\n};\n\nconst priorityColors = {\n  low: \"bg-gray-100 text-gray-800\",\n  medium: \"bg-orange-100 text-orange-800\",\n  high: \"bg-red-100 text-red-800\",\n};\n\nexport default function TicketsPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\n  const [editingTicket, setEditingTicket] = useState<Ticket | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: tickets = [], isLoading } = useQuery({\n    queryKey: [\"/api/tickets\"],\n  });\n\n  const { data: users = [] } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch(\"/api/tickets\", {\n        method: \"POST\",\n        body: JSON.stringify(data),\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n      if (!response.ok) throw new Error('Failed to create ticket');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tickets\"] });\n      setIsCreateOpen(false);\n      toast({ title: \"Success\", description: \"Ticket created successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to create ticket\", variant: \"destructive\" });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: any }) => {\n      const response = await fetch(`/api/tickets/${id}`, {\n        method: \"PUT\",\n        body: JSON.stringify(data),\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n      if (!response.ok) throw new Error('Failed to update ticket');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tickets\"] });\n      setEditingTicket(null);\n      toast({ title: \"Success\", description: \"Ticket updated successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to update ticket\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await fetch(`/api/tickets/${id}`, { method: \"DELETE\" });\n      if (!response.ok) throw new Error('Failed to delete ticket');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tickets\"] });\n      toast({ title: \"Success\", description: \"Ticket deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to delete ticket\", variant: \"destructive\" });\n    },\n  });\n\n  const filteredTickets = (tickets as Ticket[]).filter((ticket: Ticket) =>\n    ticket.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    ticket.description.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    (ticket.category && ticket.category.toLowerCase().includes(searchQuery.toLowerCase()))\n  );\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    const data = {\n      title: formData.get(\"title\") as string,\n      description: formData.get(\"description\") as string,\n      status: formData.get(\"status\") as string || \"open\",\n      priority: formData.get(\"priority\") as string || \"medium\",\n      category: formData.get(\"category\") as string || null,\n      assignedTo: formData.get(\"assignedTo\") && formData.get(\"assignedTo\") !== \"null\" ? parseInt(formData.get(\"assignedTo\") as string) : null,\n      reportedBy: formData.get(\"reportedBy\") && formData.get(\"reportedBy\") !== \"null\" && formData.get(\"reportedBy\") !== \"0\" ? parseInt(formData.get(\"reportedBy\") as string) : null,\n      dueDate: formData.get(\"dueDate\") ? new Date(formData.get(\"dueDate\") as string) : null,\n      resolution: formData.get(\"resolution\") as string || null,\n    };\n\n    if (editingTicket) {\n      updateMutation.mutate({ id: editingTicket.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Support Tickets</h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">Track and resolve customer support requests</p>\n        </div>\n        <Dialog open={isCreateOpen || !!editingTicket} onOpenChange={(open) => {\n          setIsCreateOpen(open);\n          if (!open) setEditingTicket(null);\n        }}>\n          <DialogTrigger asChild>\n            <Button onClick={() => setIsCreateOpen(true)}>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Create Ticket\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>{editingTicket ? \"Edit Ticket\" : \"Create New Ticket\"}</DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"title\">Title *</Label>\n                <Input id=\"title\" name=\"title\" defaultValue={editingTicket?.title || \"\"} required />\n              </div>\n              <div>\n                <Label htmlFor=\"description\">Description *</Label>\n                <Textarea id=\"description\" name=\"description\" defaultValue={editingTicket?.description || \"\"} rows={4} required />\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"status\">Status</Label>\n                  <Select name=\"status\" defaultValue={editingTicket?.status || \"open\"}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"open\">Open</SelectItem>\n                      <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                      <SelectItem value=\"resolved\">Resolved</SelectItem>\n                      <SelectItem value=\"closed\">Closed</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"priority\">Priority</Label>\n                  <Select name=\"priority\" defaultValue={editingTicket?.priority || \"medium\"}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"low\">Low</SelectItem>\n                      <SelectItem value=\"medium\">Medium</SelectItem>\n                      <SelectItem value=\"high\">High</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"category\">Category</Label>\n                  <Select name=\"category\" defaultValue={editingTicket?.category || \"\"}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select category\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"bug\">Bug Report</SelectItem>\n                      <SelectItem value=\"feature\">Feature Request</SelectItem>\n                      <SelectItem value=\"support\">General Support</SelectItem>\n                      <SelectItem value=\"billing\">Billing</SelectItem>\n                      <SelectItem value=\"technical\">Technical Issue</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"assignedTo\">Assigned To</Label>\n                  <Select name=\"assignedTo\" defaultValue={editingTicket?.assignedTo?.toString() || \"\"}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select user\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"null\">Unassigned</SelectItem>\n                      {users.map((user) => (\n                        <SelectItem key={user.id} value={user.id.toString()}>\n                          {user.fullName || `User ${user.id}`}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"reportedBy\">Reported By</Label>\n                  <Select name=\"reportedBy\" defaultValue={editingTicket?.reportedBy?.toString() || \"\"}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select user\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"null\">Unknown</SelectItem>\n                      {users.map((user) => (\n                        <SelectItem key={user.id} value={user.id.toString()}>\n                          {user.fullName || `User ${user.id}`}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"dueDate\">Due Date</Label>\n                  <Input \n                    id=\"dueDate\" \n                    name=\"dueDate\" \n                    type=\"date\" \n                    defaultValue={editingTicket?.dueDate ? new Date(editingTicket.dueDate).toISOString().split('T')[0] : \"\"} \n                  />\n                </div>\n              </div>\n              {editingTicket && (\n                <div>\n                  <Label htmlFor=\"resolution\">Resolution</Label>\n                  <Textarea id=\"resolution\" name=\"resolution\" defaultValue={editingTicket?.resolution || \"\"} rows={3} />\n                </div>\n              )}\n              <div className=\"flex justify-end space-x-2\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => {\n                  setIsCreateOpen(false);\n                  setEditingTicket(null);\n                }}>\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={createMutation.isPending || updateMutation.isPending}>\n                  {editingTicket ? \"Update\" : \"Create\"} Ticket\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>All Tickets ({filteredTickets.length})</CardTitle>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                <Input\n                  placeholder=\"Search tickets...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10 w-64\"\n                />\n              </div>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"flex justify-center p-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Ticket</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Priority</TableHead>\n                  <TableHead>Category</TableHead>\n                  <TableHead>Assigned To</TableHead>\n                  <TableHead>Due Date</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredTickets.map((ticket: Ticket) => (\n                  <TableRow key={ticket.id}>\n                    <TableCell>\n                      <div className=\"space-y-1\">\n                        <div className=\"font-medium\">{ticket.title}</div>\n                        <div className=\"text-sm text-gray-500 line-clamp-2\">{ticket.description}</div>\n                        <div className=\"flex items-center text-xs text-gray-400\">\n                          <Calendar className=\"w-3 h-3 mr-1\" />\n                          {ticket.createdAt ? new Date(ticket.createdAt).toLocaleDateString() : \"Unknown\"}\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge className={statusColors[ticket.status as keyof typeof statusColors] || statusColors.open}>\n                        {ticket.status || \"open\"}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant=\"outline\" className={priorityColors[ticket.priority as keyof typeof priorityColors] || priorityColors.medium}>\n                        {ticket.priority || \"medium\"}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>{ticket.category || \"-\"}</TableCell>\n                    <TableCell>\n                      {ticket.assignedTo ? (\n                        <div className=\"flex items-center\">\n                          <User className=\"w-4 h-4 mr-2 text-gray-400\" />\n                          {users.find(u => u.id === ticket.assignedTo)?.fullName || `User ${ticket.assignedTo}`}\n                        </div>\n                      ) : (\n                        <span className=\"text-gray-400\">Unassigned</span>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      {ticket.dueDate ? (\n                        <div className=\"flex items-center\">\n                          <Calendar className=\"w-4 h-4 mr-2 text-gray-400\" />\n                          {new Date(ticket.dueDate).toLocaleDateString()}\n                        </div>\n                      ) : (\n                        <span className=\"text-gray-400\">No due date</span>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => setEditingTicket(ticket)}\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => deleteMutation.mutate(ticket.id)}\n                          disabled={deleteMutation.isPending}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n                {filteredTickets.length === 0 && (\n                  <TableRow>\n                    <TableCell colSpan={7} className=\"text-center py-8 text-gray-500\">\n                      No tickets found. Create your first ticket to get started.\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":17000},"client/src/pages/users.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Plus, Search, Edit, Trash2, User, Mail, Phone, Shield, Calendar } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface User {\n  id: number;\n  username: string;\n  email: string;\n  fullName: string | null;\n  phone: string | null;\n  avatar: string | null;\n  roleId: number | null;\n  isActive: boolean | null;\n  lastLogin: Date | null;\n  createdAt: Date | null;\n}\n\ninterface UserRole {\n  id: number;\n  name: string;\n  description: string | null;\n}\n\nexport default function UsersPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\n  const [editingUser, setEditingUser] = useState<User | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: users = [], isLoading } = useQuery({\n    queryKey: [\"/api/users\"],\n  });\n\n  const { data: roles = [] } = useQuery<UserRole[]>({\n    queryKey: [\"/api/user-roles\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch(\"/api/users\", {\n        method: \"POST\",\n        body: JSON.stringify(data),\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n      if (!response.ok) throw new Error('Failed to create user');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      setIsCreateOpen(false);\n      toast({ title: \"Success\", description: \"User created successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to create user\", variant: \"destructive\" });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: any }) => {\n      const response = await fetch(`/api/users/${id}`, {\n        method: \"PUT\",\n        body: JSON.stringify(data),\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n      if (!response.ok) throw new Error('Failed to update user');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      setEditingUser(null);\n      toast({ title: \"Success\", description: \"User updated successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to update user\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await fetch(`/api/users/${id}`, { method: \"DELETE\" });\n      if (!response.ok) throw new Error('Failed to delete user');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({ title: \"Success\", description: \"User deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to delete user\", variant: \"destructive\" });\n    },\n  });\n\n  const filteredUsers = (users as User[]).filter((user: User) =>\n    user.username.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    user.email.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    (user.fullName && user.fullName.toLowerCase().includes(searchQuery.toLowerCase()))\n  );\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    const data = {\n      username: formData.get(\"username\") as string,\n      email: formData.get(\"email\") as string,\n      password: formData.get(\"password\") as string,\n      fullName: formData.get(\"fullName\") as string || null,\n      phone: formData.get(\"phone\") as string || null,\n      roleId: formData.get(\"roleId\") && formData.get(\"roleId\") !== \"null\" && formData.get(\"roleId\") !== \"\" ? parseInt(formData.get(\"roleId\") as string) : null,\n      isActive: formData.get(\"isActive\") === \"true\",\n    };\n\n    // Don't send password if editing and field is empty\n    if (editingUser && !data.password) {\n      delete (data as any).password;\n    }\n\n    if (editingUser) {\n      updateMutation.mutate({ id: editingUser.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const getInitials = (name: string | null, username: string) => {\n    if (name) {\n      return name.split(' ').map(n => n[0]).join('').toUpperCase();\n    }\n    return username.slice(0, 2).toUpperCase();\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Users & Team</h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">Manage user accounts and team members</p>\n        </div>\n        <Dialog open={isCreateOpen || !!editingUser} onOpenChange={(open) => {\n          setIsCreateOpen(open);\n          if (!open) setEditingUser(null);\n        }}>\n          <DialogTrigger asChild>\n            <Button onClick={() => setIsCreateOpen(true)}>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add User\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>{editingUser ? \"Edit User\" : \"Create New User\"}</DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"username\">Username *</Label>\n                  <Input id=\"username\" name=\"username\" defaultValue={editingUser?.username || \"\"} required />\n                </div>\n                <div>\n                  <Label htmlFor=\"email\">Email *</Label>\n                  <Input id=\"email\" name=\"email\" type=\"email\" defaultValue={editingUser?.email || \"\"} required />\n                </div>\n                <div>\n                  <Label htmlFor=\"password\">{editingUser ? \"New Password (leave blank to keep current)\" : \"Password *\"}</Label>\n                  <Input \n                    id=\"password\" \n                    name=\"password\" \n                    type=\"password\" \n                    required={!editingUser}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"fullName\">Full Name</Label>\n                  <Input id=\"fullName\" name=\"fullName\" defaultValue={editingUser?.fullName || \"\"} />\n                </div>\n                <div>\n                  <Label htmlFor=\"phone\">Phone</Label>\n                  <Input id=\"phone\" name=\"phone\" type=\"tel\" defaultValue={editingUser?.phone || \"\"} />\n                </div>\n                <div>\n                  <Label htmlFor=\"roleId\">Role</Label>\n                  <Select name=\"roleId\" defaultValue={editingUser?.roleId?.toString() || \"\"}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select role\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"null\">No role</SelectItem>\n                      {roles.map((role) => (\n                        <SelectItem key={role.id} value={role.id.toString()}>\n                          {role.name} - {role.description}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"isActive\">Status</Label>\n                  <Select name=\"isActive\" defaultValue={editingUser?.isActive?.toString() || \"true\"}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"true\">Active</SelectItem>\n                      <SelectItem value=\"false\">Inactive</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              <div className=\"flex justify-end space-x-2\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => {\n                  setIsCreateOpen(false);\n                  setEditingUser(null);\n                }}>\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={createMutation.isPending || updateMutation.isPending}>\n                  {editingUser ? \"Update\" : \"Create\"} User\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>All Users ({filteredUsers.length})</CardTitle>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                <Input\n                  placeholder=\"Search users...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10 w-64\"\n                />\n              </div>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"flex justify-center p-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>User</TableHead>\n                  <TableHead>Contact</TableHead>\n                  <TableHead>Role</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Last Login</TableHead>\n                  <TableHead>Member Since</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredUsers.map((user: User) => (\n                  <TableRow key={user.id}>\n                    <TableCell>\n                      <div className=\"flex items-center space-x-3\">\n                        <Avatar className=\"h-10 w-10\">\n                          <AvatarImage src={user.avatar || undefined} />\n                          <AvatarFallback>\n                            {getInitials(user.fullName, user.username)}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div>\n                          <div className=\"font-medium\">{user.fullName || user.username}</div>\n                          <div className=\"text-sm text-gray-500\">@{user.username}</div>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"space-y-1\">\n                        <div className=\"flex items-center text-sm\">\n                          <Mail className=\"w-3 h-3 mr-1 text-gray-400\" />\n                          {user.email}\n                        </div>\n                        {user.phone && (\n                          <div className=\"flex items-center text-sm text-gray-500\">\n                            <Phone className=\"w-3 h-3 mr-1\" />\n                            {user.phone}\n                          </div>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      {user.roleId ? (\n                        <div className=\"flex items-center\">\n                          <Shield className=\"w-4 h-4 mr-2 text-gray-400\" />\n                          <Badge variant=\"outline\">\n                            {roles.find(r => r.id === user.roleId)?.name || \"Unknown\"}\n                          </Badge>\n                        </div>\n                      ) : (\n                        <span className=\"text-gray-400\">No role</span>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant={user.isActive ? \"default\" : \"secondary\"}>\n                        {user.isActive ? \"Active\" : \"Inactive\"}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      {user.lastLogin ? (\n                        <div className=\"flex items-center\">\n                          <Calendar className=\"w-4 h-4 mr-2 text-gray-400\" />\n                          {new Date(user.lastLogin).toLocaleDateString()}\n                        </div>\n                      ) : (\n                        <span className=\"text-gray-400\">Never</span>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      {user.createdAt ? (\n                        <div className=\"flex items-center\">\n                          <Calendar className=\"w-4 h-4 mr-2 text-gray-400\" />\n                          {new Date(user.createdAt).toLocaleDateString()}\n                        </div>\n                      ) : (\n                        <span className=\"text-gray-400\">Unknown</span>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => setEditingUser(user)}\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => deleteMutation.mutate(user.id)}\n                          disabled={deleteMutation.isPending}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n                {filteredUsers.length === 0 && (\n                  <TableRow>\n                    <TableCell colSpan={7} className=\"text-center py-8 text-gray-500\">\n                      No users found. Create your first user to get started.\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":15228},"client/src/services/aiService.ts":{"content":"import { apiRequest } from \"@/lib/queryClient\";\n\nexport interface AIResponse {\n  action: \"navigate\" | \"create\" | \"respond\" | \"open_modal\";\n  module?: string;\n  type?: string;\n  data?: any;\n  message?: string;\n}\n\nexport async function sendAIMessage(message: string): Promise<AIResponse> {\n  try {\n    const response = await apiRequest(\"POST\", \"/api/ai/chat\", { message });\n    return await response.json();\n  } catch (error) {\n    console.error(\"AI service error:\", error);\n    return {\n      action: \"respond\",\n      message: \"I'm sorry, I encountered an error. Please try again.\",\n    };\n  }\n}\n","size_bytes":595},"client/src/components/AIAssistant/AIAssistant.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Bot, Send, Minimize2, Maximize2, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { processAIResponse } from \"@/lib/intents\";\n\ninterface Message {\n  id: string;\n  type: \"user\" | \"assistant\";\n  content: string;\n  timestamp: Date;\n}\n\ninterface AIAssistantProps {\n  onModuleChange: (module: string) => void;\n  onOpenModal?: (type: string, module: string) => void;\n}\n\nexport default function AIAssistant({ onModuleChange, onOpenModal }: AIAssistantProps) {\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: \"1\",\n      type: \"assistant\",\n      content: \"Hello! I'm your FlowCore assistant. I can help you navigate the app, create new items, and manage your business data. Try asking me to 'create a new ticket' or 'show me the CRM'!\",\n      timestamp: new Date(),\n    },\n  ]);\n  const [input, setInput] = useState(\"\");\n  const [isMinimized, setIsMinimized] = useState(false);\n  const [isVisible, setIsVisible] = useState(true);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const chatMutation = useMutation({\n    mutationFn: async (message: string) => {\n      const response = await apiRequest(\"POST\", \"/api/ai/chat\", { message });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      const assistantMessage: Message = {\n        id: Date.now().toString(),\n        type: \"assistant\",\n        content: data.message || \"I processed your request.\",\n        timestamp: new Date(),\n      };\n      setMessages((prev) => [...prev, assistantMessage]);\n      \n      // Process any actions from the AI response\n      processAIResponse(data, onModuleChange, onOpenModal);\n    },\n    onError: () => {\n      const errorMessage: Message = {\n        id: Date.now().toString(),\n        type: \"assistant\",\n        content: \"I'm sorry, I encountered an error. Please try again.\",\n        timestamp: new Date(),\n      };\n      setMessages((prev) => [...prev, errorMessage]);\n    },\n  });\n\n  const handleSend = () => {\n    if (!input.trim()) return;\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      type: \"user\",\n      content: input,\n      timestamp: new Date(),\n    };\n\n    setMessages((prev) => [...prev, userMessage]);\n    chatMutation.mutate(input);\n    setInput(\"\");\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\") {\n      handleSend();\n    }\n  };\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  if (!isVisible) return null;\n\n  return (\n    <div className=\"fixed bottom-4 right-4 w-80 z-50\">\n      <Card className=\"shadow-xl\">\n        <CardHeader className=\"p-4 border-b\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <Avatar className=\"w-8 h-8\">\n                <AvatarFallback className=\"bg-primary text-white\">\n                  <Bot className=\"w-4 h-4\" />\n                </AvatarFallback>\n              </Avatar>\n              <span className=\"font-medium text-slate-800\">AI Assistant</span>\n            </div>\n            <div className=\"flex items-center space-x-1\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setIsMinimized(!isMinimized)}\n              >\n                {isMinimized ? <Maximize2 className=\"w-4 h-4\" /> : <Minimize2 className=\"w-4 h-4\" />}\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setIsVisible(false)}\n              >\n                <X className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        \n        {!isMinimized && (\n          <CardContent className=\"p-0\">\n            <ScrollArea className=\"h-80 p-4\">\n              <div className=\"space-y-4\">\n                {messages.map((message) => (\n                  <div\n                    key={message.id}\n                    className={`flex items-start space-x-2 ${\n                      message.type === \"user\" ? \"justify-end\" : \"\"\n                    }`}\n                  >\n                    {message.type === \"assistant\" && (\n                      <Avatar className=\"w-6 h-6\">\n                        <AvatarFallback className=\"bg-primary text-white\">\n                          <Bot className=\"w-3 h-3\" />\n                        </AvatarFallback>\n                      </Avatar>\n                    )}\n                    <div\n                      className={`rounded-lg p-3 max-w-64 ${\n                        message.type === \"user\"\n                          ? \"bg-primary text-white\"\n                          : \"bg-slate-100 text-slate-800\"\n                      }`}\n                    >\n                      <p className=\"text-sm\">{message.content}</p>\n                    </div>\n                    {message.type === \"user\" && (\n                      <Avatar className=\"w-6 h-6\">\n                        <AvatarFallback className=\"bg-slate-300\">\n                          U\n                        </AvatarFallback>\n                      </Avatar>\n                    )}\n                  </div>\n                ))}\n                {chatMutation.isPending && (\n                  <div className=\"flex items-start space-x-2\">\n                    <Avatar className=\"w-6 h-6\">\n                      <AvatarFallback className=\"bg-primary text-white\">\n                        <Bot className=\"w-3 h-3\" />\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"bg-slate-100 rounded-lg p-3\">\n                      <p className=\"text-sm text-slate-800\">Typing...</p>\n                    </div>\n                  </div>\n                )}\n                <div ref={messagesEndRef} />\n              </div>\n            </ScrollArea>\n            \n            <div className=\"p-4 border-t\">\n              <div className=\"flex space-x-2\">\n                <Input\n                  placeholder=\"Ask me anything...\"\n                  value={input}\n                  onChange={(e) => setInput(e.target.value)}\n                  onKeyPress={handleKeyPress}\n                  disabled={chatMutation.isPending}\n                />\n                <Button\n                  onClick={handleSend}\n                  disabled={chatMutation.isPending || !input.trim()}\n                >\n                  <Send className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        )}\n      </Card>\n    </div>\n  );\n}\n","size_bytes":6982},"client/src/components/CRM/AddLeadModal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { toast } from \"@/hooks/use-toast\";\nimport type { InsertLead } from \"@shared/schema\";\n\ninterface AddLeadModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function AddLeadModal({ isOpen, onClose }: AddLeadModalProps) {\n  const [formData, setFormData] = useState<InsertLead>({\n    name: \"\",\n    email: \"\",\n    company: \"\",\n    status: \"new\",\n    priority: \"medium\",\n    tags: [],\n    notes: \"\",\n  });\n\n  const queryClient = useQueryClient();\n\n  const mutation = useMutation({\n    mutationFn: async (data: InsertLead) => {\n      await apiRequest(\"POST\", \"/api/leads\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leads\"] });\n      toast({\n        title: \"Success\",\n        description: \"Lead created successfully\",\n      });\n      onClose();\n      setFormData({\n        name: \"\",\n        email: \"\",\n        company: \"\",\n        status: \"new\",\n        priority: \"medium\",\n        tags: [],\n        notes: \"\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create lead\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    mutation.mutate(formData);\n  };\n\n  const handleInputChange = (field: keyof InsertLead, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>Add New Lead</DialogTitle>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"name\">Full Name *</Label>\n            <Input\n              id=\"name\"\n              value={formData.name}\n              onChange={(e) => handleInputChange(\"name\", e.target.value)}\n              required\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"email\">Email *</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              value={formData.email}\n              onChange={(e) => handleInputChange(\"email\", e.target.value)}\n              required\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"company\">Company</Label>\n            <Input\n              id=\"company\"\n              value={formData.company || \"\"}\n              onChange={(e) => handleInputChange(\"company\", e.target.value)}\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label>Status</Label>\n            <Select value={formData.status} onValueChange={(value) => handleInputChange(\"status\", value)}>\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"new\">New</SelectItem>\n                <SelectItem value=\"contacted\">Contacted</SelectItem>\n                <SelectItem value=\"qualified\">Qualified</SelectItem>\n                <SelectItem value=\"converted\">Converted</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label>Priority</Label>\n            <Select value={formData.priority} onValueChange={(value) => handleInputChange(\"priority\", value)}>\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"low\">Low</SelectItem>\n                <SelectItem value=\"medium\">Medium</SelectItem>\n                <SelectItem value=\"high\">High</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"notes\">Notes</Label>\n            <Textarea\n              id=\"notes\"\n              value={formData.notes || \"\"}\n              onChange={(e) => handleInputChange(\"notes\", e.target.value)}\n              rows={3}\n            />\n          </div>\n\n          <div className=\"flex justify-end space-x-2\">\n            <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={mutation.isPending}>\n              {mutation.isPending ? \"Creating...\" : \"Create Lead\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5042},"client/src/components/CRM/CRMModule.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Plus, Search, Edit, Trash2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { toast } from \"@/hooks/use-toast\";\nimport AddLeadModal from \"./AddLeadModal\";\nimport type { Lead } from \"@shared/schema\";\n\ninterface CRMModuleProps {\n  modalRequest?: {type: string; module: string} | null;\n  onModalHandled?: () => void;\n}\n\nexport default function CRMModule({ modalRequest, onModalHandled }: CRMModuleProps) {\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  \n  // Handle modal requests from AI assistant\n  useEffect(() => {\n    if (modalRequest?.type === \"lead\") {\n      setIsAddModalOpen(true);\n      onModalHandled?.();\n    }\n  }, [modalRequest, onModalHandled]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [priorityFilter, setPriorityFilter] = useState(\"all\");\n  const queryClient = useQueryClient();\n\n  const { data: leads, isLoading } = useQuery<Lead[]>({\n    queryKey: [\"/api/leads\"],\n    refetchInterval: 30000,\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: number) => {\n      await apiRequest(\"DELETE\", `/api/leads/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leads\"] });\n      toast({\n        title: \"Success\",\n        description: \"Lead deleted successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete lead\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredLeads = leads?.filter(lead => {\n    const matchesSearch = lead.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         lead.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         lead.company?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || lead.status === statusFilter;\n    const matchesPriority = priorityFilter === \"all\" || lead.priority === priorityFilter;\n    return matchesSearch && matchesStatus && matchesPriority;\n  }) || [];\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"new\": return \"bg-blue-100 text-blue-800\";\n      case \"contacted\": return \"bg-yellow-100 text-yellow-800\";\n      case \"qualified\": return \"bg-green-100 text-green-800\";\n      case \"converted\": return \"bg-purple-100 text-purple-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"high\": return \"bg-red-100 text-red-800\";\n      case \"medium\": return \"bg-orange-100 text-orange-800\";\n      case \"low\": return \"bg-green-100 text-green-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const formatDate = (date: Date | string | null) => {\n    if (!date) return \"Never\";\n    return new Date(date).toLocaleDateString();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex justify-between items-center\">\n          <h3 className=\"text-lg font-semibold text-slate-800\">Customer Relationship Management</h3>\n          <Button disabled>\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Add Lead\n          </Button>\n        </div>\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"animate-pulse space-y-4\">\n              {[...Array(5)].map((_, i) => (\n                <div key={i} className=\"h-12 bg-slate-200 rounded\"></div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h3 className=\"text-lg font-semibold text-slate-800\">Customer Relationship Management</h3>\n        <Button onClick={() => setIsAddModalOpen(true)}>\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Add Lead\n        </Button>\n      </div>\n\n      <Card>\n        <CardContent className=\"p-0\">\n          <div className=\"p-4 border-b border-slate-200\">\n            <div className=\"flex flex-col md:flex-row md:items-center md:justify-between space-y-2 md:space-y-0 gap-4\">\n              <div className=\"relative flex-1 max-w-sm\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-slate-400\" />\n                <Input\n                  placeholder=\"Search leads...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n              <div className=\"flex space-x-2\">\n                <Select value={statusFilter} onValueChange={setStatusFilter}>\n                  <SelectTrigger className=\"w-32\">\n                    <SelectValue placeholder=\"Status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Status</SelectItem>\n                    <SelectItem value=\"new\">New</SelectItem>\n                    <SelectItem value=\"contacted\">Contacted</SelectItem>\n                    <SelectItem value=\"qualified\">Qualified</SelectItem>\n                    <SelectItem value=\"converted\">Converted</SelectItem>\n                  </SelectContent>\n                </Select>\n                <Select value={priorityFilter} onValueChange={setPriorityFilter}>\n                  <SelectTrigger className=\"w-32\">\n                    <SelectValue placeholder=\"Priority\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Priority</SelectItem>\n                    <SelectItem value=\"high\">High</SelectItem>\n                    <SelectItem value=\"medium\">Medium</SelectItem>\n                    <SelectItem value=\"low\">Low</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Name</TableHead>\n                  <TableHead>Company</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Priority</TableHead>\n                  <TableHead>Last Contact</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredLeads.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={6} className=\"text-center py-8 text-slate-500\">\n                      {searchTerm || statusFilter !== \"all\" || priorityFilter !== \"all\" \n                        ? \"No leads match your filters\" \n                        : \"No leads found. Create your first lead to get started.\"}\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  filteredLeads.map((lead) => (\n                    <TableRow key={lead.id}>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-3\">\n                          <Avatar>\n                            <AvatarFallback>\n                              {lead.name.split(' ').map(n => n[0]).join('')}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div>\n                            <div className=\"font-medium text-slate-900\">{lead.name}</div>\n                            <div className=\"text-sm text-slate-500\">{lead.email}</div>\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell className=\"text-slate-900\">{lead.company || \"-\"}</TableCell>\n                      <TableCell>\n                        <Badge className={getStatusColor(lead.status)}>\n                          {lead.status}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <Badge className={getPriorityColor(lead.priority)}>\n                          {lead.priority}\n                        </Badge>\n                      </TableCell>\n                      <TableCell className=\"text-slate-500\">\n                        {formatDate(lead.lastContactedAt)}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-2\">\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            onClick={() => deleteMutation.mutate(lead.id)}\n                            disabled={deleteMutation.isPending}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n\n      <AddLeadModal \n        isOpen={isAddModalOpen} \n        onClose={() => setIsAddModalOpen(false)} \n      />\n    </div>\n  );\n}\n","size_bytes":9966},"client/src/components/Email/EmailModule.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Plus, Mail, Send, Reply } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport type { Email } from \"@shared/schema\";\n\ninterface EmailModuleProps {\n  modalRequest?: {type: string; module: string} | null;\n  onModalHandled?: () => void;\n}\n\nexport default function EmailModule({ modalRequest, onModalHandled }: EmailModuleProps = {}) {\n  const { data: emails, isLoading } = useQuery<Email[]>({\n    queryKey: [\"/api/emails\"],\n    refetchInterval: 30000,\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"sent\": return \"bg-green-100 text-green-800\";\n      case \"failed\": return \"bg-red-100 text-red-800\";\n      case \"pending\": return \"bg-yellow-100 text-yellow-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const formatDate = (date: Date | string) => {\n    return new Date(date).toLocaleString();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex justify-between items-center\">\n          <h3 className=\"text-lg font-semibold text-slate-800\">Email & Communication</h3>\n          <Button disabled>\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Compose Email\n          </Button>\n        </div>\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"animate-pulse space-y-4\">\n              {[...Array(5)].map((_, i) => (\n                <div key={i} className=\"h-16 bg-slate-200 rounded\"></div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h3 className=\"text-lg font-semibold text-slate-800\">Email & Communication</h3>\n        <Button onClick={() => alert(\"Compose Email functionality would be implemented here\")}>\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Compose Email\n        </Button>\n      </div>\n\n      <Card>\n        <CardContent className=\"p-0\">\n          <div className=\"p-4 border-b border-slate-200\">\n            <h4 className=\"text-lg font-semibold text-slate-800\">Email History</h4>\n          </div>\n          \n          <div className=\"divide-y divide-slate-200\">\n            {emails?.length === 0 ? (\n              <div className=\"p-12 text-center\">\n                <div className=\"w-16 h-16 bg-slate-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Mail className=\"w-8 h-8 text-slate-400\" />\n                </div>\n                <h4 className=\"text-lg font-semibold text-slate-800 mb-2\">No emails yet</h4>\n                <p className=\"text-slate-600 mb-4\">Send your first email to start communicating with clients</p>\n                <Button onClick={() => alert(\"Compose Email functionality would be implemented here\")}>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Compose Email\n                </Button>\n              </div>\n            ) : (\n              emails?.map((email) => (\n                <div key={email.id} className=\"p-4 hover:bg-slate-50 cursor-pointer\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Avatar>\n                        <AvatarFallback>\n                          {email.to.split('@')[0].charAt(0).toUpperCase()}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div>\n                        <p className=\"text-sm font-medium text-slate-900\">{email.to}</p>\n                        <p className=\"text-sm text-slate-600\">{email.subject}</p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-sm text-slate-500\">{formatDate(email.sentAt)}</p>\n                      <Badge className={getStatusColor(email.status)}>\n                        {email.status}\n                      </Badge>\n                    </div>\n                  </div>\n                  <div className=\"mt-2 text-sm text-slate-600 line-clamp-2\">\n                    {email.body}\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4568},"client/src/components/Projects/ProjectsModule.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Plus, Calendar, Users, BarChart3 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport type { Project } from \"@shared/schema\";\n\ninterface ProjectsModuleProps {\n  modalRequest?: {type: string; module: string} | null;\n  onModalHandled?: () => void;\n}\n\nexport default function ProjectsModule({ modalRequest, onModalHandled }: ProjectsModuleProps = {}) {\n  const { data: projects, isLoading } = useQuery<Project[]>({\n    queryKey: [\"/api/projects\"],\n    refetchInterval: 30000,\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"active\": return \"bg-green-100 text-green-800\";\n      case \"completed\": return \"bg-blue-100 text-blue-800\";\n      case \"on_hold\": return \"bg-yellow-100 text-yellow-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const formatDate = (date: Date | string | null) => {\n    if (!date) return \"Not set\";\n    return new Date(date).toLocaleDateString();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex justify-between items-center\">\n          <h3 className=\"text-lg font-semibold text-slate-800\">Projects & Tasks</h3>\n          <Button disabled>\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Add Project\n          </Button>\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[...Array(6)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"h-40 bg-slate-200 rounded\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h3 className=\"text-lg font-semibold text-slate-800\">Projects & Tasks</h3>\n        <Button onClick={() => alert(\"Add Project functionality would be implemented here\")}>\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Add Project\n        </Button>\n      </div>\n\n      {projects?.length === 0 ? (\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <div className=\"w-16 h-16 bg-slate-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <BarChart3 className=\"w-8 h-8 text-slate-400\" />\n            </div>\n            <h4 className=\"text-lg font-semibold text-slate-800 mb-2\">No projects yet</h4>\n            <p className=\"text-slate-600 mb-4\">Create your first project to start tracking progress</p>\n            <Button onClick={() => alert(\"Add Project functionality would be implemented here\")}>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Create Project\n            </Button>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {projects?.map((project) => (\n            <Card key={project.id}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h4 className=\"text-lg font-semibold text-slate-800 truncate\">\n                    {project.name}\n                  </h4>\n                  <Badge className={getStatusColor(project.status)}>\n                    {project.status.replace('_', ' ')}\n                  </Badge>\n                </div>\n                \n                <p className=\"text-sm text-slate-600 mb-4 line-clamp-2\">\n                  {project.description || \"No description provided\"}\n                </p>\n                \n                <div className=\"mb-4\">\n                  <div className=\"flex items-center justify-between text-sm text-slate-600 mb-2\">\n                    <span>Progress</span>\n                    <span>{project.progress || 0}%</span>\n                  </div>\n                  <Progress value={project.progress || 0} className=\"h-2\" />\n                </div>\n                \n                <div className=\"flex items-center justify-between text-sm text-slate-600\">\n                  <div className=\"flex items-center\">\n                    <Calendar className=\"w-4 h-4 mr-1\" />\n                    <span>Due: {formatDate(project.endDate)}</span>\n                  </div>\n                  <div className=\"flex -space-x-2\">\n                    <Avatar className=\"w-6 h-6 border-2 border-white\">\n                      <AvatarFallback className=\"text-xs\">JD</AvatarFallback>\n                    </Avatar>\n                    <Avatar className=\"w-6 h-6 border-2 border-white\">\n                      <AvatarFallback className=\"text-xs\">SM</AvatarFallback>\n                    </Avatar>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":5145},"client/src/components/Sales/SalesModule.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Plus, TrendingUp, TrendingDown, DollarSign } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Bar } from \"react-chartjs-2\";\nimport type { Deal } from \"@shared/schema\";\n\ninterface SalesModuleProps {\n  modalRequest?: {type: string; module: string} | null;\n  onModalHandled?: () => void;\n}\n\nexport default function SalesModule({ modalRequest, onModalHandled }: SalesModuleProps = {}) {\n  const { data: deals, isLoading } = useQuery<Deal[]>({\n    queryKey: [\"/api/deals\"],\n    refetchInterval: 30000,\n  });\n\n  const revenueData = {\n    labels: ['Q1', 'Q2', 'Q3', 'Q4'],\n    datasets: [\n      {\n        label: 'Revenue',\n        data: [85000, 92000, 78000, 95000],\n        backgroundColor: 'hsl(207, 90%, 54%)',\n        borderColor: 'hsl(207, 90%, 54%)',\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        display: false,\n      },\n    },\n    scales: {\n      y: {\n        beginAtZero: true,\n      },\n    },\n  };\n\n  const totalRevenue = deals?.reduce((sum, deal) => sum + deal.value, 0) || 0;\n  const activeDeals = deals?.filter(deal => deal.stage !== \"closed\").length || 0;\n  const conversionRate = deals?.length > 0 ? (deals.filter(deal => deal.stage === \"closed\").length / deals.length * 100).toFixed(1) : \"0\";\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex justify-between items-center\">\n          <h3 className=\"text-lg font-semibold text-slate-800\">Sales & Revenue</h3>\n          <Button disabled>\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Add Deal\n          </Button>\n        </div>\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {[...Array(3)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"h-20 bg-slate-200 rounded\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h3 className=\"text-lg font-semibold text-slate-800\">Sales & Revenue</h3>\n        <Button onClick={() => alert(\"Add Deal functionality would be implemented here\")}>\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Add Deal\n        </Button>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-slate-600\">Total Revenue</p>\n                <p className=\"text-2xl font-bold text-slate-800\">\n                  ${totalRevenue.toLocaleString()}\n                </p>\n                <p className=\"text-sm text-green-600 mt-1 flex items-center\">\n                  <TrendingUp className=\"w-4 h-4 mr-1\" />\n                  +12% from last month\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                <DollarSign className=\"text-green-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-slate-600\">Active Deals</p>\n                <p className=\"text-2xl font-bold text-slate-800\">{activeDeals}</p>\n                <p className=\"text-sm text-blue-600 mt-1\">5 closing this week</p>\n              </div>\n              <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                <TrendingUp className=\"text-blue-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-slate-600\">Conversion Rate</p>\n                <p className=\"text-2xl font-bold text-slate-800\">{conversionRate}%</p>\n                <p className=\"text-sm text-green-600 mt-1 flex items-center\">\n                  <TrendingUp className=\"w-4 h-4 mr-1\" />\n                  +3% from last month\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n                <TrendingUp className=\"text-purple-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h4 className=\"text-lg font-semibold text-slate-800\">Revenue Chart</h4>\n          </div>\n          <div className=\"h-80\">\n            <Bar data={revenueData} options={chartOptions} />\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5238},"client/src/components/Tickets/AddTicketModal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { toast } from \"@/hooks/use-toast\";\nimport type { InsertTicket } from \"@shared/schema\";\n\ninterface AddTicketModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function AddTicketModal({ isOpen, onClose }: AddTicketModalProps) {\n  const [formData, setFormData] = useState<InsertTicket>({\n    title: \"\",\n    description: \"\",\n    priority: \"medium\",\n    assignee: \"\",\n    status: \"open\",\n  });\n\n  const queryClient = useQueryClient();\n\n  const mutation = useMutation({\n    mutationFn: async (data: InsertTicket) => {\n      await apiRequest(\"POST\", \"/api/tickets\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tickets\"] });\n      toast({\n        title: \"Success\",\n        description: \"Ticket created successfully\",\n      });\n      onClose();\n      setFormData({\n        title: \"\",\n        description: \"\",\n        priority: \"medium\",\n        assignee: \"\",\n        status: \"open\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create ticket\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    mutation.mutate(formData);\n  };\n\n  const handleInputChange = (field: keyof InsertTicket, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>Create New Ticket</DialogTitle>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"title\">Title *</Label>\n            <Input\n              id=\"title\"\n              value={formData.title}\n              onChange={(e) => handleInputChange(\"title\", e.target.value)}\n              required\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"description\">Description *</Label>\n            <Textarea\n              id=\"description\"\n              value={formData.description}\n              onChange={(e) => handleInputChange(\"description\", e.target.value)}\n              rows={3}\n              required\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label>Priority</Label>\n            <Select value={formData.priority} onValueChange={(value) => handleInputChange(\"priority\", value)}>\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"low\">Low</SelectItem>\n                <SelectItem value=\"medium\">Medium</SelectItem>\n                <SelectItem value=\"high\">High</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label>Assign To</Label>\n            <Select value={formData.assignee || \"\"} onValueChange={(value) => handleInputChange(\"assignee\", value)}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Select assignee\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"Sarah Johnson\">Sarah Johnson</SelectItem>\n                <SelectItem value=\"Mike Chen\">Mike Chen</SelectItem>\n                <SelectItem value=\"Lisa Rodriguez\">Lisa Rodriguez</SelectItem>\n                <SelectItem value=\"David Kim\">David Kim</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"flex justify-end space-x-2\">\n            <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={mutation.isPending}>\n              {mutation.isPending ? \"Creating...\" : \"Create Ticket\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":4525},"client/src/components/Tickets/TicketsModule.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Plus, Search, Eye, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { toast } from \"@/hooks/use-toast\";\nimport AddTicketModal from \"./AddTicketModal\";\nimport type { Ticket } from \"@shared/schema\";\n\ninterface TicketsModuleProps {\n  modalRequest?: {type: string; module: string} | null;\n  onModalHandled?: () => void;\n}\n\nexport default function TicketsModule({ modalRequest, onModalHandled }: TicketsModuleProps = {}) {\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const queryClient = useQueryClient();\n\n  const { data: tickets, isLoading } = useQuery<Ticket[]>({\n    queryKey: [\"/api/tickets\"],\n    refetchInterval: 30000,\n  });\n\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: number; status: string }) => {\n      await apiRequest(\"PUT\", `/api/tickets/${id}`, { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tickets\"] });\n      toast({\n        title: \"Success\",\n        description: \"Ticket status updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update ticket status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredTickets = tickets?.filter(ticket => {\n    const matchesSearch = ticket.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         ticket.description.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || ticket.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  }) || [];\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"open\": return \"bg-red-100 text-red-800\";\n      case \"pending\": return \"bg-yellow-100 text-yellow-800\";\n      case \"resolved\": return \"bg-green-100 text-green-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"high\": return \"bg-red-100 text-red-800\";\n      case \"medium\": return \"bg-orange-100 text-orange-800\";\n      case \"low\": return \"bg-green-100 text-green-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const formatDate = (date: Date | string) => {\n    return new Date(date).toLocaleDateString();\n  };\n\n  const handleStatusFilter = (status: string) => {\n    setStatusFilter(status);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex justify-between items-center\">\n          <h3 className=\"text-lg font-semibold text-slate-800\">Support Tickets</h3>\n          <Button disabled>\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Add Ticket\n          </Button>\n        </div>\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"animate-pulse space-y-4\">\n              {[...Array(5)].map((_, i) => (\n                <div key={i} className=\"h-12 bg-slate-200 rounded\"></div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h3 className=\"text-lg font-semibold text-slate-800\">Support Tickets</h3>\n        <Button onClick={() => setIsAddModalOpen(true)}>\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Add Ticket\n        </Button>\n      </div>\n\n      <Card>\n        <CardContent className=\"p-0\">\n          <div className=\"p-4 border-b border-slate-200\">\n            <div className=\"flex flex-col md:flex-row md:items-center md:justify-between space-y-2 md:space-y-0 gap-4\">\n              <div className=\"flex space-x-2\">\n                <Button\n                  variant={statusFilter === \"all\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => handleStatusFilter(\"all\")}\n                >\n                  All\n                </Button>\n                <Button\n                  variant={statusFilter === \"open\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => handleStatusFilter(\"open\")}\n                >\n                  Open\n                </Button>\n                <Button\n                  variant={statusFilter === \"pending\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => handleStatusFilter(\"pending\")}\n                >\n                  Pending\n                </Button>\n                <Button\n                  variant={statusFilter === \"resolved\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => handleStatusFilter(\"resolved\")}\n                >\n                  Resolved\n                </Button>\n              </div>\n              <div className=\"relative flex-1 max-w-sm\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-slate-400\" />\n                <Input\n                  placeholder=\"Search tickets...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>ID</TableHead>\n                  <TableHead>Title</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Priority</TableHead>\n                  <TableHead>Assignee</TableHead>\n                  <TableHead>Created</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredTickets.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={7} className=\"text-center py-8 text-slate-500\">\n                      {searchTerm || statusFilter !== \"all\" \n                        ? \"No tickets match your filters\" \n                        : \"No tickets found. Create your first ticket to get started.\"}\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  filteredTickets.map((ticket) => (\n                    <TableRow key={ticket.id}>\n                      <TableCell className=\"font-medium\">#{ticket.id}</TableCell>\n                      <TableCell>\n                        <div className=\"max-w-xs truncate\">{ticket.title}</div>\n                      </TableCell>\n                      <TableCell>\n                        <Badge className={getStatusColor(ticket.status)}>\n                          {ticket.status}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <Badge className={getPriorityColor(ticket.priority)}>\n                          {ticket.priority}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>{ticket.assignee || \"Unassigned\"}</TableCell>\n                      <TableCell className=\"text-slate-500\">\n                        {formatDate(ticket.createdAt)}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-2\">\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <Eye className=\"w-4 h-4\" />\n                          </Button>\n                          {ticket.status !== \"resolved\" && (\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => updateStatusMutation.mutate({ \n                                id: ticket.id, \n                                status: \"resolved\" \n                              })}\n                              disabled={updateStatusMutation.isPending}\n                            >\n                              <X className=\"w-4 h-4\" />\n                            </Button>\n                          )}\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n\n      <AddTicketModal \n        isOpen={isAddModalOpen} \n        onClose={() => setIsAddModalOpen(false)} \n      />\n    </div>\n  );\n}\n","size_bytes":9010},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}